[{"/Users/griffinbaker/Desktop/chat-application/client/src/index.js":"1","/Users/griffinbaker/Desktop/chat-application/client/src/App.js":"2","/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-view/chat-view.component.jsx":"3","/Users/griffinbaker/Desktop/chat-application/client/src/components/side-bar/side-bar.component.jsx":"4","/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx":"5","/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx":"6","/Users/griffinbaker/Desktop/chat-application/client/src/components/text-header/text-header.component.jsx":"7","/Users/griffinbaker/Desktop/chat-application/client/src/components/add-friend-modal/add-friend-modal.component.jsx":"8","/Users/griffinbaker/Desktop/chat-application/client/src/components/new-conversation-modal/new-conversation-modal.component.jsx":"9","/Users/griffinbaker/Desktop/chat-application/client/src/components/modal/modal.component.jsx":"10","/Users/griffinbaker/Desktop/chat-application/client/src/components/contact-preview/contact-preview.component.jsx":"11","/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-participant/chat-participant.component.jsx":"12","/Users/griffinbaker/Desktop/chat-application/client/src/components/contact/contact.component.jsx":"13","/Users/griffinbaker/Desktop/chat-application/client/src/contexts/socket-context.js":"14","/Users/griffinbaker/Desktop/chat-application/client/src/routes/header/header.component.jsx":"15","/Users/griffinbaker/Desktop/chat-application/client/src/routes/authentication/authentication.component.jsx":"16","/Users/griffinbaker/Desktop/chat-application/client/src/routes/application-view/application-view.component.jsx":"17","/Users/griffinbaker/Desktop/chat-application/client/src/components/login/login.component.jsx":"18","/Users/griffinbaker/Desktop/chat-application/client/src/components/register/register.component.jsx":"19","/Users/griffinbaker/Desktop/chat-application/client/src/contexts/authentication-context.js":"20","/Users/griffinbaker/Desktop/chat-application/client/src/components/spinner/spinner.component.jsx":"21","/Users/griffinbaker/Desktop/chat-application/client/src/components/header-chat/header-chat.component.jsx":"22","/Users/griffinbaker/Desktop/chat-application/client/src/components/header-auth/header-auth.component.jsx":"23","/Users/griffinbaker/Desktop/chat-application/client/src/components/account-dropdown/account-dropdown.component.jsx":"24","/Users/griffinbaker/Desktop/chat-application/client/src/components/sidebar-modal/sidebar-modal.components.jsx":"25","/Users/griffinbaker/Desktop/chat-application/client/src/components/search-result/search-result-component.jsx":"26","/Users/griffinbaker/Desktop/chat-application/client/src/utils/utils.js":"27","/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-info-modal/chat-info-modal.components.jsx":"28","/Users/griffinbaker/Desktop/chat-application/client/src/components/user-info-modal/user-info-modal.component.jsx":"29","/Users/griffinbaker/Desktop/chat-application/client/src/components/tooltip/tooltip.component.jsx":"30","/Users/griffinbaker/Desktop/chat-application/client/src/contexts/chat-view-context.js":"31","/Users/griffinbaker/Desktop/chat-application/client/src/components/add-user-dropdown/add-user-dropdown.component.jsx":"32","/Users/griffinbaker/Desktop/chat-application/client/src/components/user-info-dropdown/user-info-dropdown.component.jsx":"33","/Users/griffinbaker/Desktop/chat-application/client/src/components/back-arrow/back-arrow.component.jsx":"34","/Users/griffinbaker/Desktop/chat-application/client/src/components/notification-dropdown/notification-dropdown.component.jsx":"35"},{"size":919,"mtime":1655855883839,"results":"36","hashOfConfig":"37"},{"size":1632,"mtime":1656375426184,"results":"38","hashOfConfig":"37"},{"size":3433,"mtime":1656392314018,"results":"39","hashOfConfig":"37"},{"size":4623,"mtime":1656391550763,"results":"40","hashOfConfig":"37"},{"size":4241,"mtime":1656360121142,"results":"41","hashOfConfig":"37"},{"size":12221,"mtime":1656392309593,"results":"42","hashOfConfig":"37"},{"size":1590,"mtime":1656386813586,"results":"43","hashOfConfig":"37"},{"size":724,"mtime":1654899912850,"results":"44","hashOfConfig":"37"},{"size":13212,"mtime":1656124266653,"results":"45","hashOfConfig":"37"},{"size":648,"mtime":1654999974234,"results":"46","hashOfConfig":"37"},{"size":1026,"mtime":1656375494547,"results":"47","hashOfConfig":"37"},{"size":500,"mtime":1656375480660,"results":"48","hashOfConfig":"37"},{"size":261,"mtime":1653712165602,"results":"49","hashOfConfig":"37"},{"size":1314,"mtime":1656386498425,"results":"50","hashOfConfig":"37"},{"size":589,"mtime":1655666222866,"results":"51","hashOfConfig":"37"},{"size":385,"mtime":1654656793394,"results":"52","hashOfConfig":"37"},{"size":1279,"mtime":1656375505517,"results":"53","hashOfConfig":"37"},{"size":4380,"mtime":1656265963357,"results":"54","hashOfConfig":"37"},{"size":11008,"mtime":1656362504296,"results":"55","hashOfConfig":"37"},{"size":1442,"mtime":1656279109535,"results":"56","hashOfConfig":"37"},{"size":342,"mtime":1654558387062,"results":"57","hashOfConfig":"37"},{"size":3007,"mtime":1656305892972,"results":"58","hashOfConfig":"37"},{"size":368,"mtime":1654460755860,"results":"59","hashOfConfig":"37"},{"size":2146,"mtime":1656376823239,"results":"60","hashOfConfig":"37"},{"size":1107,"mtime":1654900611385,"results":"61","hashOfConfig":"37"},{"size":903,"mtime":1655233984716,"results":"62","hashOfConfig":"37"},{"size":2482,"mtime":1656387549462,"results":"63","hashOfConfig":"37"},{"size":10784,"mtime":1656375470221,"results":"64","hashOfConfig":"37"},{"size":8078,"mtime":1656372483440,"results":"65","hashOfConfig":"37"},{"size":550,"mtime":1654904222205,"results":"66","hashOfConfig":"37"},{"size":7480,"mtime":1656376832995,"results":"67","hashOfConfig":"37"},{"size":5032,"mtime":1656375456313,"results":"68","hashOfConfig":"37"},{"size":1617,"mtime":1656290446668,"results":"69","hashOfConfig":"37"},{"size":805,"mtime":1656386126954,"results":"70","hashOfConfig":"37"},{"size":4496,"mtime":1656392132789,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"11kj6ws",{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"/Users/griffinbaker/Desktop/chat-application/client/src/index.js",[],[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/App.js",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-view/chat-view.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/side-bar/side-bar.component.jsx",["181","182"],[],"import { useEffect } from 'react';\n// import { ReactComponent as SearchIcon } from '../../assets/search.svg';\nimport ChatPreview from '../chat-preview/chat-preview.component';\nimport './side-bar.styles.scss';\nimport ContactPreview from '../contact-preview/contact-preview.component';\nimport Spinner from '../spinner/spinner.component';\nimport { useChatView, MODAL_TYPE } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { defaultToast, TOAST_TYPE } from '../../utils/utils';\n\nconst SideBar = () => {\n  const { socket } = useSocket();\n  const { currentUser } = useAuthentication();\n  const {\n    isChatViewLoading,\n    handleModal,\n    sideBarCategory,\n    activeView,\n    windowDimensions,\n    setChats,\n    activeChat,\n    setActiveChat,\n    chats,\n    setNotifications,\n  } = useChatView();\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\n      'updated chat',\n      (\n        updatedChat,\n        removeFlag = null,\n        updateFlag = null,\n        checkForDuplicate = null\n      ) => {\n        if (!removeFlag && !updateFlag) {\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n        }\n\n        if (removeFlag) {\n          setChats(prevState => {\n            return prevState.filter(chat => chat._id !== updatedChat._id);\n          });\n          return;\n        }\n\n        const priorChatUserNamesAndId = chats.map(chat => [\n          chat.users.map(({ userName }) => userName).sort(),\n          chat._id,\n        ]);\n\n        const updatedChatUserNames = [...updatedChat.users]\n          .map(user => user.userName)\n          .sort();\n\n        const existingChatUsersAndId = priorChatUserNamesAndId.find(chat => {\n          if (chat[0].length !== updatedChatUserNames.length) return false;\n          return chat[0].every((user, i) => user === updatedChatUserNames[i]);\n        });\n\n        if (existingChatUsersAndId && checkForDuplicate) {\n          const existingChat = chats.find(\n            chat => chat._id === existingChatUsersAndId[1]\n          );\n          setActiveChat([existingChat]);\n          setChats(prevState => {\n            return prevState.filter(chat => chat._id !== updatedChat._id);\n          });\n          return;\n        }\n\n        if (\n          updateFlag &&\n          activeChat[0] &&\n          updatedChat._id === activeChat[0]._id\n        ) {\n          setActiveChat([updatedChat]);\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n          return;\n        } else if (\n          updateFlag &&\n          chats.some(chat => chat._id === updatedChat._id)\n        ) {\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n          return;\n        }\n      }\n    );\n    return () => socket.off('updated chat');\n  }, [\n    socket,\n    setChats,\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions.width,\n    currentUser?.token,\n    setNotifications,\n    currentUser,\n  ]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('chat creation', newChat => {\n      setChats(prevState => [newChat, ...prevState]);\n    });\n    return () => socket.off('chat creation');\n  }, [socket, setChats]);\n\n  return (\n    <div\n      style={\n        windowDimensions.width > 900\n          ? { width: '31%' }\n          : activeView === 'chat-preview'\n          ? { width: '100%' }\n          : { display: 'none' }\n      }\n      className=\"side-bar-container\"\n    >\n      <div className=\"side-bar-header-title-container\">\n        <p>My Chats</p>\n      </div>\n\n      <div style={{ flex: '1' }}>\n        <ChatPreview />\n        {isChatViewLoading ? <Spinner type=\"search\" /> : <ContactPreview />}\n      </div>\n\n      <button\n        className=\"side-bar-container-generate-button\"\n        onClick={() => handleModal(MODAL_TYPE.sidebar)}\n        type=\"button\"\n      >\n        {sideBarCategory === 'conversations'\n          ? 'New Conversation'\n          : 'Add Friend'}\n      </button>\n    </div>\n  );\n};\n\nexport default SideBar;\n","/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx",["183","184","185"],[],"import { useCallback, useEffect, useState, Fragment, useRef } from 'react';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport {\n  defaultToast,\n  sameSenderAndNotCurrentUser,\n  TOAST_TYPE,\n  userSent,\n  getTyperString,\n  generateChatNameForSoloChats,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nlet typingTimer;\n\nconst MessageView = ({ isTyping, setIsTyping, messages, setMessages }) => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const { currentUser } = useAuthentication();\n  const { activeChat, setNotifications, unreadMessages, setUnreadMessages } =\n    useChatView();\n  const { socket, onlineUsers } = useSocket();\n\n  const [isLoading, setIsLoading] = useState(false);\n  // const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n  const [showFlag, setShowFlag] = useState(false);\n  const [circuit, setCircuit] = useState(false);\n\n  const newRef = useRef();\n\n  useEffect(() => {\n    const handleKeyDownForNewMessages = e => {\n      if (e.key === 'Escape') setUnreadMessages([]);\n    };\n    window.addEventListener('keydown', handleKeyDownForNewMessages);\n    return () =>\n      window.addEventListener('keydown', handleKeyDownForNewMessages);\n  }, [setUnreadMessages]);\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage,\n          }),\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setUnreadMessages([]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr =>\n            onlineUserArr.includes(user._id)\n          );\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        });\n\n        // Log the notification for every user that is offline so it appears when they log in\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n                userId: user._id,\n                test: 'hey',\n              }),\n            }\n          );\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n\n    setIsLoading(true);\n    const response = await fetch(\n      `http://localhost:4000/api/message/${activeChat[0]._id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n\n  useEffect(() => {\n    fetchMessages();\n    setShowFlag(false);\n  }, [fetchMessages, activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n\n  // useEffect(() => {\n  //   if (!socket) return;\n  //   socket.on('msg-received', async message => {\n  //     if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n  //       try {\n  //         const response = await fetch(\n  //           `http://localhost:4000/api/notification/addNotification`,\n  //           {\n  //             method: 'post',\n  //             headers: {\n  //               Authorization: `Bearer ${currentUser.token}`,\n  //               'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //               message,\n  //             }),\n  //           }\n  //         );\n  //         const notification = await response.json();\n  //         setNotifications(prevState => [...prevState, notification]);\n  //       } catch (error) {\n  //         defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n  //       }\n  //     } else {\n  //       setIsTyping(false);\n  //       setMessages(prevState => [...prevState, message]);\n  //     }\n  //   });\n  //   return () => socket.off('msg-received');\n  // }, [\n  //   socket,\n  //   activeChat,\n  //   setNotifications,\n  //   currentUser.token,\n  //   setUnreadMessages,\n  // ]);\n\n  useEffect(() => {\n    setIsTyping(false);\n    if (typingTimer) clearTimeout(typingTimer);\n  }, [activeChat, setIsTyping]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n\n  useEffect(() => {\n    setTypers([]);\n  }, [activeChat]);\n\n  const handleScroll = e => {\n    const bottom =\n      e.target.scrollHeight - Math.round(e.target.scrollTop) ===\n      e.target.clientHeight;\n    if (circuit) {\n      setShowFlag(true);\n      setCircuit(false);\n    } else if (bottom && showFlag) {\n      setUnreadMessages([]);\n      setShowFlag(false);\n    }\n  };\n\n  const setRef = useCallback(\n    node => {\n      if (node && isTyping && isScrolledIntoView(node)) {\n        node.scrollIntoView({ smooth: true });\n      } else if (node && !isTyping) {\n        node.scrollIntoView({ smooth: true });\n      }\n      setCircuit(true);\n    },\n    [isTyping, setCircuit]\n  );\n\n  const isScrolledIntoView = el => {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom;\n\n    // Only completely visible elements return true:\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight;\n    // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n    return isVisible;\n  };\n\n  return (\n    <div className=\"message-view-container\">\n      {isLoading ? (\n        <Spinner type=\"search\" />\n      ) : (\n        <>\n          <div\n            onScroll={handleScroll}\n            className=\"message-view-active-chat-container\"\n          >\n            {messages.length > 0 &&\n              messages.map((message, i) => {\n                const lastMessageBool = messages.length - 1 === i + 1;\n                const userSentBool = userSent(currentUser, message);\n                const sameSenderAndNotCurrentUserBool =\n                  sameSenderAndNotCurrentUser(i, messages, currentUser);\n                const firstUnreadMessage =\n                  unreadMessages.length > 0 &&\n                  unreadMessages[0].message._id === message._id;\n\n                return (\n                  <Fragment key={i}>\n                    {firstUnreadMessage && (\n                      <div\n                        style={i === 0 ? { marginTop: '16px' } : {}}\n                        ref={setRef}\n                        className=\"first-unread-message-container\"\n                      >\n                        <p\n                          ref={newRef}\n                          style={{ marginLeft: `-${newRef.current?.width}` }}\n                        >\n                          New\n                        </p>\n                      </div>\n                    )}\n\n                    <div\n                      ref={\n                        lastMessageBool && unreadMessages.length === 0\n                          ? setRef\n                          : null\n                      }\n                      style={i === 0 ? { paddingTop: '6px' } : {}}\n                      className={`message-view-message-container ${\n                        userSentBool ? 'user-sent' : ''\n                      }`}\n                    >\n                      <div\n                        className=\"message-view-message-image-container\"\n                        style={\n                          sameSenderAndNotCurrentUserBool || userSentBool\n                            ? { visibility: 'hidden' }\n                            : { marginTop: '2px' }\n                        }\n                      >\n                        <img\n                          height=\"100%\"\n                          src={message.sender.picture}\n                          alt=\"profile\"\n                        />\n                      </div>\n                      <div className=\"message-view-text-container\">\n                        <div className=\"message-view-text\">{message.text}</div>\n                        <div\n                          style={\n                            sameSenderAndNotCurrentUserBool || userSentBool\n                              ? { display: 'none' }\n                              : {}\n                          }\n                          className=\"message-view-text-info\"\n                        >\n                          <p>\n                            @{!userSentBool ? message.sender.userName : 'You'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </Fragment>\n                );\n              })}\n          </div>\n\n          {isTyping && (\n            <div className=\"lottie-container\">\n              {typers.length ? getTyperString(typers) : ''}\n              <Lottie\n                animationData={animationData}\n                loop={true}\n                autoplay={true}\n                style={{ height: '16px', display: 'block' }}\n              />\n            </div>\n          )}\n\n          <div\n            className=\"send-message-editable\"\n            data-text={`Message ${\n              activeChat[0].isGroupChat\n                ? activeChat[0].chatName\n                : generateChatNameForSoloChats(activeChat[0].users, currentUser)\n            }`}\n            contentEditable\n            onKeyDown={handleKeyDown}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MessageView;\n","/Users/griffinbaker/Desktop/chat-application/client/src/components/text-header/text-header.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/add-friend-modal/add-friend-modal.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/new-conversation-modal/new-conversation-modal.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/modal/modal.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/contact-preview/contact-preview.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-participant/chat-participant.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/contact/contact.component.jsx",[],[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/socket-context.js",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/routes/header/header.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/routes/authentication/authentication.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/routes/application-view/application-view.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/login/login.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/register/register.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/authentication-context.js",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/spinner/spinner.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/header-chat/header-chat.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/header-auth/header-auth.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/account-dropdown/account-dropdown.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/sidebar-modal/sidebar-modal.components.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/search-result/search-result-component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/utils/utils.js",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-info-modal/chat-info-modal.components.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/user-info-modal/user-info-modal.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/tooltip/tooltip.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/chat-view-context.js",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/add-user-dropdown/add-user-dropdown.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/user-info-dropdown/user-info-dropdown.component.jsx",["186","187","188","189","190","191","192","193"],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/back-arrow/back-arrow.component.jsx",[],[],"/Users/griffinbaker/Desktop/chat-application/client/src/components/notification-dropdown/notification-dropdown.component.jsx",[],[],{"ruleId":"194","severity":1,"message":"195","line":10,"column":10,"nodeType":"196","messageId":"197","endLine":10,"endColumn":22},{"ruleId":"194","severity":1,"message":"198","line":10,"column":24,"nodeType":"196","messageId":"197","endLine":10,"endColumn":34},{"ruleId":"194","severity":1,"message":"199","line":25,"column":23,"nodeType":"196","messageId":"197","endLine":25,"endColumn":39},{"ruleId":"200","severity":1,"message":"201","line":136,"column":6,"nodeType":"202","endLine":136,"endColumn":45,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":212,"column":6,"nodeType":"202","endLine":212,"endColumn":22,"suggestions":"205"},{"ruleId":"194","severity":1,"message":"195","line":3,"column":10,"nodeType":"196","messageId":"197","endLine":3,"endColumn":22},{"ruleId":"194","severity":1,"message":"198","line":3,"column":24,"nodeType":"196","messageId":"197","endLine":3,"endColumn":34},{"ruleId":"194","severity":1,"message":"206","line":7,"column":11,"nodeType":"196","messageId":"197","endLine":7,"endColumn":22},{"ruleId":"194","severity":1,"message":"207","line":8,"column":11,"nodeType":"196","messageId":"197","endLine":8,"endColumn":25},{"ruleId":"194","severity":1,"message":"208","line":8,"column":27,"nodeType":"196","messageId":"197","endLine":8,"endColumn":32},{"ruleId":"194","severity":1,"message":"209","line":8,"column":34,"nodeType":"196","messageId":"197","endLine":8,"endColumn":42},{"ruleId":"194","severity":1,"message":"210","line":8,"column":44,"nodeType":"196","messageId":"197","endLine":8,"endColumn":57},{"ruleId":"194","severity":1,"message":"211","line":8,"column":59,"nodeType":"196","messageId":"197","endLine":8,"endColumn":69},"no-unused-vars","'defaultToast' is defined but never used.","Identifier","unusedVar","'TOAST_TYPE' is defined but never used.","'setNotifications' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setMessages'. Either include it or remove the dependency array. If 'setMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["212"],"React Hook useEffect has a missing dependency: 'setIsTyping'. Either include it or remove the dependency array. If 'setIsTyping' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],"'currentUser' is assigned a value but never used.","'activeUserInfo' is assigned a value but never used.","'chats' is assigned a value but never used.","'setChats' is assigned a value but never used.","'setActiveChat' is assigned a value but never used.","'closeModal' is assigned a value but never used.",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [activeChat, currentUser.token, setMessages, socket]",{"range":"218","text":"219"},"Update the dependencies array to be: [setIsTyping, socket, typers]",{"range":"220","text":"221"},[4761,4800],"[activeChat, currentUser.token, setMessages, socket]",[7105,7121],"[setIsTyping, socket, typers]"]