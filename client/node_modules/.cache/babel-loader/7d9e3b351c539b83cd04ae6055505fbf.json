{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport { defaultToast, sameSenderAndNotCurrentUser, TOAST_TYPE, userSent } from '../../utils/utils'; // Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = 'http://localhost:4000';\nlet socket;\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: animationData,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice'\n  }\n};\n\nconst MessageView = () => {\n  _s();\n\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat\n  } = useChatView(); // const [socketConnected, setSocketConnected] = useState(false);\n\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false); // const [typers, setTypers] = useState([]);\n\n  const typers = useRef(); // So I am thinking that I can definitely scroll into view whatever message is actually clicked within whatever chat, I don't see why that would not be possible?\n  // Pretty cool, when the component actually mounts, the ref for the element gets passed into the callback function, could actually do some pretyy coll things with this, like making an animation or shake the screen or bounce the message or anything when the message actually enters the screen...\n\n  const handleKeyDown = async e => {\n    const newMessage = e.target.innerHTML;\n\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage\n          })\n        });\n        const message = await response.json();\n        socket.emit('new message', message);\n        setMessages(prevState => [...prevState, message]);\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        console.log('hey');\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n\n      let lastTypingTime = new Date().getTime();\n      var timerLength = 3000;\n      setTimeout(() => {\n        var timeNow = new Date().getTime();\n        var timeDiff = timeNow - lastTypingTime;\n\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(`http://localhost:4000/api/message/${activeChat[0]._id}`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${currentUser.token}`\n      }\n    });\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n    socket.emit('join chat', activeChat[0]._id);\n  }, [activeChat, currentUser.token]);\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n  useEffect(() => {\n    console.log('running');\n    socket = io(ENDPOINT);\n    socket.emit('setup', currentUser); // For when the user refreshes the page or leaves the chat, otherwise the lottie is suspended\n\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      typers.current.push(typer); // setTypers(prevState => [typer, ...prevState]);\n    });\n    socket.on('stop typing', userName => {\n      // setIsTyping(false);\n      if (!typers.current) return;\n      const usersStillTyping = typers.current.filter(typer => typer !== userName);\n\n      if (!usersStillTyping) {\n        // setTypers(usersStillTyping);\n        typers.current.push(usersStillTyping);\n        return;\n      }\n\n      setIsTyping(false);\n      typers.current = []; // setTypers([]);\n    });\n    return () => socket.disconnect();\n  }, [currentUser, activeChat, typers]);\n  useEffect(() => {\n    socket.on('message received', message => {\n      setIsTyping(false); // setTyping(false);\n\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        // give notification\n        console.log('fail some how');\n      } else {\n        setMessages(prevState => {\n          return [...prevState, message];\n        });\n      }\n    });\n  }, [activeChat]);\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, []); // What is the best way to make it so that the text bubble can expland if it needs to??\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-view-container\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      type: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-view-active-chat-container\",\n        children: [messages.length > 0 && messages.map((message, i) => {\n          const lastMessageBool = messages.length - 1 === i + 1;\n          const userSentBool = userSent(currentUser, message);\n          const sameSenderAndNotCurrentUserBool = sameSenderAndNotCurrentUser(i, messages, currentUser);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: lastMessageBool ? setRef : null,\n            className: `message-view-message-container ${userSentBool ? 'user-sent' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-view-message-image-container\",\n              style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                visibility: 'hidden'\n              } : {\n                marginTop: '2px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                height: \"100%\",\n                src: message.sender.picture,\n                alt: \"profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-view-text-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-text\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                  display: 'none'\n                } : {},\n                className: \"message-view-text-info\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"@\", !userSentBool ? message.sender.userName : 'You']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 19\n          }, this);\n        }), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: isTyping ? setRef : null,\n          className: \"lottie-container\",\n          children: [typers.current ? typers.current.map(typer => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"@\", typer, \" is typing\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 49\n          }, this)) : '', /*#__PURE__*/_jsxDEV(Lottie, {\n            animationData: animationData,\n            loop: true,\n            autoplay: true,\n            style: {\n              height: '16px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-editable\",\n        \"data-text\": `Message `,\n        contentEditable: true,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageView, \"OLe6VGevrk3bYRmZnDdUvcoVOEw=\", false, function () {\n  return [useAuthentication, useChatView];\n});\n\n_c = MessageView;\nexport default MessageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageView\");","map":{"version":3,"names":["useCallback","useEffect","useState","useRef","io","Lottie","useChatView","Spinner","useAuthentication","animationData","defaultToast","sameSenderAndNotCurrentUser","TOAST_TYPE","userSent","ENDPOINT","socket","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","MessageView","currentUser","activeChat","messages","setMessages","isLoading","setIsLoading","isTyping","setIsTyping","typing","setTyping","typers","handleKeyDown","e","newMessage","target","innerHTML","key","preventDefault","response","fetch","method","headers","Authorization","token","body","JSON","stringify","chatId","_id","text","message","json","emit","prevState","error","console","log","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","fetchMessages","on","typer","current","push","userName","usersStillTyping","filter","disconnect","chat","setRef","node","scrollIntoView","smooth","length","map","i","lastMessageBool","userSentBool","sameSenderAndNotCurrentUserBool","visibility","marginTop","sender","picture","display","height"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport {\n  defaultToast,\n  sameSenderAndNotCurrentUser,\n  TOAST_TYPE,\n  userSent,\n} from '../../utils/utils';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nconst ENDPOINT = 'http://localhost:4000';\nlet socket;\n\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: animationData,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice',\n  },\n};\n\nconst MessageView = () => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const { currentUser } = useAuthentication();\n  const { activeChat } = useChatView();\n\n  // const [socketConnected, setSocketConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  // const [typers, setTypers] = useState([]);\n\n  const typers = useRef();\n\n  // So I am thinking that I can definitely scroll into view whatever message is actually clicked within whatever chat, I don't see why that would not be possible?\n  // Pretty cool, when the component actually mounts, the ref for the element gets passed into the callback function, could actually do some pretyy coll things with this, like making an animation or shake the screen or bounce the message or anything when the message actually enters the screen...\n\n  const handleKeyDown = async e => {\n    const newMessage = e.target.innerHTML;\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage,\n          }),\n        });\n        const message = await response.json();\n        socket.emit('new message', message);\n        setMessages(prevState => [...prevState, message]);\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        console.log('hey');\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n      let lastTypingTime = new Date().getTime();\n      var timerLength = 3000;\n      setTimeout(() => {\n        var timeNow = new Date().getTime();\n        var timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(\n      `http://localhost:4000/api/message/${activeChat[0]._id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n\n    socket.emit('join chat', activeChat[0]._id);\n  }, [activeChat, currentUser.token]);\n\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n\n  useEffect(() => {\n    console.log('running');\n    socket = io(ENDPOINT);\n    socket.emit('setup', currentUser);\n    // For when the user refreshes the page or leaves the chat, otherwise the lottie is suspended\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      typers.current.push(typer);\n      // setTypers(prevState => [typer, ...prevState]);\n    });\n    socket.on('stop typing', userName => {\n      // setIsTyping(false);\n\n      if (!typers.current) return;\n      const usersStillTyping = typers.current.filter(\n        typer => typer !== userName\n      );\n      if (!usersStillTyping) {\n        // setTypers(usersStillTyping);\n        typers.current.push(usersStillTyping);\n        return;\n      }\n      setIsTyping(false);\n      typers.current = [];\n      // setTypers([]);\n    });\n\n    return () => socket.disconnect();\n  }, [currentUser, activeChat, typers]);\n\n  useEffect(() => {\n    socket.on('message received', message => {\n      setIsTyping(false);\n      // setTyping(false);\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        // give notification\n        console.log('fail some how');\n      } else {\n        setMessages(prevState => {\n          return [...prevState, message];\n        });\n      }\n    });\n  }, [activeChat]);\n\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n\n  // What is the best way to make it so that the text bubble can expland if it needs to??\n  return (\n    <div className=\"message-view-container\">\n      {isLoading ? (\n        <Spinner type=\"search\" />\n      ) : (\n        <>\n          <div className=\"message-view-active-chat-container\">\n            {messages.length > 0 &&\n              messages.map((message, i) => {\n                const lastMessageBool = messages.length - 1 === i + 1;\n                const userSentBool = userSent(currentUser, message);\n                const sameSenderAndNotCurrentUserBool =\n                  sameSenderAndNotCurrentUser(i, messages, currentUser);\n                return (\n                  <div\n                    key={i}\n                    ref={lastMessageBool ? setRef : null}\n                    className={`message-view-message-container ${\n                      userSentBool ? 'user-sent' : ''\n                    }`}\n                  >\n                    <div\n                      className=\"message-view-message-image-container\"\n                      style={\n                        sameSenderAndNotCurrentUserBool || userSentBool\n                          ? { visibility: 'hidden' }\n                          : { marginTop: '2px' }\n                      }\n                    >\n                      <img\n                        height=\"100%\"\n                        src={message.sender.picture}\n                        alt=\"profile\"\n                      />\n                    </div>\n                    <div className=\"message-view-text-container\">\n                      <div className=\"message-view-text\">{message.text}</div>\n                      <div\n                        style={\n                          sameSenderAndNotCurrentUserBool || userSentBool\n                            ? { display: 'none' }\n                            : {}\n                        }\n                        className=\"message-view-text-info\"\n                      >\n                        <p>\n                          @{!userSentBool ? message.sender.userName : 'You'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            {isTyping && (\n              <div ref={isTyping ? setRef : null} className=\"lottie-container\">\n                {typers.current\n                  ? typers.current.map(typer => <p>@{typer} is typing</p>)\n                  : ''}\n                <Lottie\n                  animationData={animationData}\n                  loop={true}\n                  autoplay={true}\n                  style={{ height: '16px' }}\n                />\n              </div>\n            )}\n          </div>\n\n          <div\n            className=\"send-message-editable\"\n            data-text={`Message `}\n            contentEditable\n            onKeyDown={handleKeyDown}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MessageView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}