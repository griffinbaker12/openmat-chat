{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useSidebar } from './sidebar-context';\nimport { useSocket } from './socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const useConversations = () => {\n  _s();\n\n  return useContext(ConversationsContext);\n};\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  // const [conversations, setConversations] = useState([]);\n  const {\n    chats\n  } = useSidebar();\n  const [activeChat, setActiveChat] = useState([]);\n  useEffect(() => {\n    console.log(activeChat, 'active chat from provider');\n    console.log(chats, 'chats from provider');\n    if (chats.length === 0) return;else {\n      setActiveChat(chats[0]);\n    }\n  }, [chats]); // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n  // const createConversation = recipients =>\n  //   setConversations(prevState => [...prevState, { recipients, messages: [] }]);\n  // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n  // const addMessageToConversation = useCallback(\n  //   ({ recipients, text, sender, time }) => {\n  //     setConversations(prevState => {\n  //       const newConversationsArray = prevState.map(conversation => {\n  //         if (arrEqualityTest(conversation.recipients, recipients)) {\n  //           return {\n  //             ...conversation,\n  //             messages: [\n  //               ...conversation.messages,\n  //               {\n  //                 sender,\n  //                 text,\n  //                 userSent: userName === sender,\n  //                 timeStamp: time,\n  //               },\n  //             ],\n  //           };\n  //         }\n  //         return conversation;\n  //       });\n  //       return [...newConversationsArray];\n  //     });\n  //   },\n  //   [setConversations, userName]\n  // );\n  // useEffect(() => {\n  //   if (!socket) return;\n  //   socket.on('receive-message', addMessageToConversation);\n  //   return () => socket.off('receive-message');\n  // }, [socket, addMessageToConversation]);\n  // const sendMessage = (recipients, text, time) => {\n  //   socket.emit('send-message', { recipients, text });\n  //   addMessageToConversation({ recipients, text, sender: userName, time });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      activeChat,\n      setActiveChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}; // // Helper functions\n// const arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n//   if (mappedRecipients.length !== receivedRecipients.length) return false;\n//   mappedRecipients.sort();\n//   receivedRecipients.sort();\n//   return receivedRecipients.every(\n//     (recipient, i) => recipient === mappedRecipients[i]\n//   );\n// };\n\n_s2(ConversationsProvider, \"JCHV8Nim2yIIOUyQccudzTJvKyY=\", false, function () {\n  return [useSidebar];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useSidebar","useSocket","ConversationsContext","useConversations","ConversationsProvider","children","chats","activeChat","setActiveChat","console","log","length"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { useSidebar } from './sidebar-context';\nimport { useSocket } from './socket-context';\n\nconst ConversationsContext = createContext();\n\nexport const useConversations = () => useContext(ConversationsContext);\n\nexport const ConversationsProvider = ({ children }) => {\n  // const [conversations, setConversations] = useState([]);\n  const { chats } = useSidebar();\n  const [activeChat, setActiveChat] = useState([]);\n\n  useEffect(() => {\n    console.log(activeChat, 'active chat from provider');\n    console.log(chats, 'chats from provider');\n    if (chats.length === 0) return;\n    else {\n      setActiveChat(chats[0]);\n    }\n  }, [chats]);\n\n  // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  // const createConversation = recipients =>\n  //   setConversations(prevState => [...prevState, { recipients, messages: [] }]);\n\n  // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n  // const addMessageToConversation = useCallback(\n  //   ({ recipients, text, sender, time }) => {\n  //     setConversations(prevState => {\n  //       const newConversationsArray = prevState.map(conversation => {\n  //         if (arrEqualityTest(conversation.recipients, recipients)) {\n  //           return {\n  //             ...conversation,\n  //             messages: [\n  //               ...conversation.messages,\n  //               {\n  //                 sender,\n  //                 text,\n  //                 userSent: userName === sender,\n  //                 timeStamp: time,\n  //               },\n  //             ],\n  //           };\n  //         }\n  //         return conversation;\n  //       });\n  //       return [...newConversationsArray];\n  //     });\n  //   },\n  //   [setConversations, userName]\n  // );\n\n  // useEffect(() => {\n  //   if (!socket) return;\n  //   socket.on('receive-message', addMessageToConversation);\n  //   return () => socket.off('receive-message');\n  // }, [socket, addMessageToConversation]);\n\n  // const sendMessage = (recipients, text, time) => {\n  //   socket.emit('send-message', { recipients, text });\n  //   addMessageToConversation({ recipients, text, sender: userName, time });\n  // };\n\n  return (\n    <ConversationsContext.Provider\n      value={{\n        activeChat,\n        setActiveChat,\n      }}\n    >\n      {children}\n    </ConversationsContext.Provider>\n  );\n};\n\n// // Helper functions\n// const arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n//   if (mappedRecipients.length !== receivedRecipients.length) return false;\n//   mappedRecipients.sort();\n//   receivedRecipients.sort();\n//   return receivedRecipients.every(\n//     (recipient, i) => recipient === mappedRecipients[i]\n//   );\n// };\n"],"mappings":";;;;AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAOA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAEA,MAAMC,oBAAoB,gBAAGP,aAAa,EAA1C;AAEA,OAAO,MAAMQ,gBAAgB,GAAG;EAAA;;EAAA,OAAMP,UAAU,CAACM,oBAAD,CAAhB;AAAA,CAAzB;;GAAMC,gB;;AAEb,OAAO,MAAMC,qBAAqB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACrD;EACA,MAAM;IAAEC;EAAF,IAAYN,UAAU,EAA5B;EACA,MAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;EAEAD,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAwB,2BAAxB;IACAE,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmB,qBAAnB;IACA,IAAIA,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB,OAAxB,KACK;MACHH,aAAa,CAACF,KAAK,CAAC,CAAD,CAAN,CAAb;IACD;EACF,CAPQ,EAON,CAACA,KAAD,CAPM,CAAT,CALqD,CAcrD;EAEA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;EAEA,oBACE,QAAC,oBAAD,CAAsB,QAAtB;IACE,KAAK,EAAE;MACLC,UADK;MAELC;IAFK,CADT;IAAA,UAMGH;EANH;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CArEM,C,CAuEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IA/EaD,qB;UAEOJ,U;;;KAFPI,qB"},"metadata":{},"sourceType":"module"}