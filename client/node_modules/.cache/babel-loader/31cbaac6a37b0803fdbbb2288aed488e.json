{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport { generateChatNameForSoloChats } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatPreview = () => {\n  _s();\n\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions,\n    setActiveView\n  } = useChatView();\n  const {\n    onlineUsers\n  } = useSocket();\n  useEffect(() => {});\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name'); // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-preview-container\",\n    onClick: handleClick,\n    children: chats.length > 0 && chats.map(_ref => {\n      var _activeChat$;\n\n      let {\n        _id,\n        chatName,\n        users,\n        isGroupChat\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        name: _id,\n        className: `chat-preview-list ${_id === ((_activeChat$ = activeChat[0]) === null || _activeChat$ === void 0 ? void 0 : _activeChat$._id) ? 'active' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-preview-list-item\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: !isGroupChat ? generateChatNameForSoloChats(users, currentUser) : chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatPreview, \"Q77eeeWM2uzT7QeI7Js5G6Y/2lA=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = ChatPreview;\nexport default ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"names":["useCallback","useEffect","useState","useAuthentication","useChatView","generateChatNameForSoloChats","useSocket","ChatPreview","currentUser","activeChat","setActiveChat","chats","windowDimensions","setActiveView","onlineUsers","handleClick","e","chatId","target","getAttribute","width","find","chat","_id","length","map","chatName","users","isGroupChat"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport { generateChatNameForSoloChats } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\nconst ChatPreview = () => {\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const { currentUser } = useAuthentication();\n  const { activeChat, setActiveChat, chats, windowDimensions, setActiveView } =\n    useChatView();\n\n  const { onlineUsers } = useSocket();\n\n  useEffect(() => {});\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name');\n\n    // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return (\n    <div className=\"chat-preview-container\" onClick={handleClick}>\n      {chats.length > 0 &&\n        chats.map(({ _id, chatName, users, isGroupChat }) => (\n          <div\n            key={_id}\n            name={_id}\n            className={`chat-preview-list ${\n              _id === activeChat[0]?._id ? 'active' : ''\n            }`}\n          >\n            <div className=\"chat-preview-list-item\">\n              <p>\n                {!isGroupChat\n                  ? generateChatNameForSoloChats(users, currentUser)\n                  : chatName}\n              </p>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ChatPreview;\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAO,4BAAP;AACA,SAASC,4BAAT,QAA6C,mBAA7C;AACA,SAASC,SAAT,QAA0B,+BAA1B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EACA,MAAM;IAAEC;EAAF,IAAkBL,iBAAiB,EAAzC;EACA,MAAM;IAAEM,UAAF;IAAcC,aAAd;IAA6BC,KAA7B;IAAoCC,gBAApC;IAAsDC;EAAtD,IACJT,WAAW,EADb;EAGA,MAAM;IAAEU;EAAF,IAAkBR,SAAS,EAAjC;EAEAL,SAAS,CAAC,MAAM,CAAE,CAAT,CAAT;;EAEA,MAAMc,WAAW,GAAGC,CAAC,IAAI;IACvB,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAf,CADuB,CAGvB;;IACA,IAAI,CAACF,MAAL,EAAa;;IAEb,IAAIL,gBAAgB,CAACQ,KAAjB,IAA0B,GAA9B,EAAmC;MACjCP,aAAa,CAAC,MAAD,CAAb;IACD;;IAED,MAAMJ,UAAU,GAAGE,KAAK,CAACU,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,MAAhC,CAAnB;IACAP,aAAa,CAAC,CAACD,UAAD,CAAD,CAAb;EACD,CAZD;;EAcA,oBACE;IAAK,SAAS,EAAC,wBAAf;IAAwC,OAAO,EAAEM,WAAjD;IAAA,UACGJ,KAAK,CAACa,MAAN,GAAe,CAAf,IACCb,KAAK,CAACc,GAAN,CAAU;MAAA;;MAAA,IAAC;QAAEF,GAAF;QAAOG,QAAP;QAAiBC,KAAjB;QAAwBC;MAAxB,CAAD;MAAA,oBACR;QAEE,IAAI,EAAEL,GAFR;QAGE,SAAS,EAAG,qBACVA,GAAG,sBAAKd,UAAU,CAAC,CAAD,CAAf,iDAAK,aAAec,GAApB,CAAH,GAA6B,QAA7B,GAAwC,EACzC,EALH;QAAA,uBAOE;UAAK,SAAS,EAAC,wBAAf;UAAA,uBACE;YAAA,UACG,CAACK,WAAD,GACGvB,4BAA4B,CAACsB,KAAD,EAAQnB,WAAR,CAD/B,GAEGkB;UAHN;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MAPF,GACOH,GADP;QAAA;QAAA;QAAA;MAAA,QADQ;IAAA,CAAV;EAFJ;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD,CA9CD;;GAAMhB,W;UAEoBJ,iB,EAEtBC,W,EAEsBE,S;;;KANpBC,W;AAgDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}