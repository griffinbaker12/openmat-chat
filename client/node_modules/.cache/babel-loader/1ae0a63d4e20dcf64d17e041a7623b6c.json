{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState, Fragment } from 'react';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport { defaultToast, sameSenderAndNotCurrentUser, TOAST_TYPE, userSent, getTyperString, generateChatNameForSoloChats } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context'; // Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet typingTimer;\n\nconst MessageView = () => {\n  _s();\n\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setNotifications,\n    setReloadCircuit,\n    unreadMessages,\n    setUnreadMessages\n  } = useChatView();\n  const {\n    socket,\n    onlineUsers\n  } = useSocket();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n  const [showFlag, setShowFlag] = useState(false);\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Escape') setUnreadMessages([]);\n    };\n\n    window.addEventListener('keypress', handleKeyPress);\n    return () => window.addEventListener('keypress', handleKeyPress);\n  }, [setUnreadMessages]);\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage\n          })\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setUnreadMessages([]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr => onlineUserArr.includes(user._id));\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        }); // Log the notification for every user that is offline so it appears when they log in\n\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message,\n              userId: user._id\n            })\n          });\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(`http://localhost:4000/api/message/${activeChat[0]._id}`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${currentUser.token}`\n      }\n    });\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n  useEffect(() => {\n    fetchMessages();\n    setShowFlag(false);\n  }, [fetchMessages, activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message\n            })\n          });\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [socket, activeChat, setNotifications, currentUser.token, setUnreadMessages]);\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n\n  const handleScroll = e => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    if (bottom && showFlag) {\n      setUnreadMessages([]);\n    }\n\n    setShowFlag(true);\n  };\n\n  const setRef = useCallback(node => {\n    if (node && isTyping && isScrolledIntoView(node)) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    } else if (node && !isTyping) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, [isTyping]);\n\n  const isScrolledIntoView = el => {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom; // Only completely visible elements return true:\n\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight; // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n\n    return isVisible;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-view-container\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      type: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onScroll: handleScroll,\n        className: \"message-view-active-chat-container\",\n        children: messages.length > 0 && messages.map((message, i) => {\n          const lastMessageBool = messages.length - 1 === i + 1;\n          const userSentBool = userSent(currentUser, message);\n          const sameSenderAndNotCurrentUserBool = sameSenderAndNotCurrentUser(i, messages, currentUser);\n\n          const firstUnreadMessage = unreadMessages.length > 0 && unreadMessages.at(-1).message._id === message._id;\n\n          return /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [firstUnreadMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: setRef,\n              className: \"first-unread-message-container\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"New\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: lastMessageBool && unreadMessages.length === 0 ? setRef : null,\n              style: i === 0 ? {\n                paddingTop: '6px'\n              } : {},\n              className: `message-view-message-container ${userSentBool ? 'user-sent' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-message-image-container\",\n                style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                  visibility: 'hidden'\n                } : {\n                  marginTop: '2px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  height: \"100%\",\n                  src: message.sender.picture,\n                  alt: \"profile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-view-text\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                    display: 'none'\n                  } : {},\n                  className: \"message-view-text-info\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"@\", !userSentBool ? message.sender.userName : 'You']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lottie-container\",\n        children: [typers.length ? getTyperString(typers) : '', /*#__PURE__*/_jsxDEV(Lottie, {\n          animationData: animationData,\n          loop: true,\n          autoplay: true,\n          style: {\n            height: '16px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-editable\",\n        \"data-text\": `Message ${activeChat[0].isGroupChat ? activeChat[0].chatName : generateChatNameForSoloChats(activeChat[0].users, currentUser)}`,\n        contentEditable: true,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageView, \"UP0UtrsrOCWfbfx38Do8Q9n7lHA=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = MessageView;\nexport default MessageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageView\");","map":{"version":3,"names":["useCallback","useEffect","useState","Fragment","Lottie","useChatView","Spinner","useAuthentication","animationData","defaultToast","sameSenderAndNotCurrentUser","TOAST_TYPE","userSent","getTyperString","generateChatNameForSoloChats","useSocket","typingTimer","MessageView","currentUser","activeChat","setNotifications","setReloadCircuit","unreadMessages","setUnreadMessages","socket","onlineUsers","messages","setMessages","isLoading","setIsLoading","isTyping","setIsTyping","typing","setTyping","typers","setTypers","showFlag","setShowFlag","handleKeyPress","e","key","window","addEventListener","handleKeyDown","newMessage","target","innerHTML","preventDefault","response","fetch","method","headers","Authorization","token","body","JSON","stringify","chatId","_id","text","message","json","emit","prevState","chat","usersOtherThanCurrentAndOffline","users","forEach","user","isOnline","some","onlineUserArr","includes","push","userId","error","lastTypingTime","Date","getTime","timerLength","clearTimeout","setTimeout","timeNow","timeDiff","fetchMessages","on","notification","off","typer","Set","userName","usersStillTyping","filter","length","handleScroll","bottom","scrollHeight","scrollTop","clientHeight","setRef","node","isScrolledIntoView","scrollIntoView","smooth","el","rect","getBoundingClientRect","elemTop","top","elemBottom","isVisible","innerHeight","map","i","lastMessageBool","userSentBool","sameSenderAndNotCurrentUserBool","firstUnreadMessage","at","paddingTop","visibility","marginTop","sender","picture","display","height","isGroupChat","chatName"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState, Fragment } from 'react';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport {\n  defaultToast,\n  sameSenderAndNotCurrentUser,\n  TOAST_TYPE,\n  userSent,\n  getTyperString,\n  generateChatNameForSoloChats,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nlet typingTimer;\n\nconst MessageView = () => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const { currentUser } = useAuthentication();\n  const {\n    activeChat,\n    setNotifications,\n    setReloadCircuit,\n    unreadMessages,\n    setUnreadMessages,\n  } = useChatView();\n  const { socket, onlineUsers } = useSocket();\n\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n  const [showFlag, setShowFlag] = useState(false);\n\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Escape') setUnreadMessages([]);\n    };\n    window.addEventListener('keypress', handleKeyPress);\n    return () => window.addEventListener('keypress', handleKeyPress);\n  }, [setUnreadMessages]);\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage,\n          }),\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setUnreadMessages([]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr =>\n            onlineUserArr.includes(user._id)\n          );\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        });\n\n        // Log the notification for every user that is offline so it appears when they log in\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n                userId: user._id,\n              }),\n            }\n          );\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n\n    setIsLoading(true);\n    const response = await fetch(\n      `http://localhost:4000/api/message/${activeChat[0]._id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n\n  useEffect(() => {\n    fetchMessages();\n    setShowFlag(false);\n  }, [fetchMessages, activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n              }),\n            }\n          );\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [\n    socket,\n    activeChat,\n    setNotifications,\n    currentUser.token,\n    setUnreadMessages,\n  ]);\n\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n\n  const handleScroll = e => {\n    const bottom =\n      e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n    if (bottom && showFlag) {\n      setUnreadMessages([]);\n    }\n    setShowFlag(true);\n  };\n\n  const setRef = useCallback(\n    node => {\n      if (node && isTyping && isScrolledIntoView(node)) {\n        node.scrollIntoView({ smooth: true });\n      } else if (node && !isTyping) {\n        node.scrollIntoView({ smooth: true });\n      }\n    },\n    [isTyping]\n  );\n\n  const isScrolledIntoView = el => {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom;\n\n    // Only completely visible elements return true:\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight;\n    // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n    return isVisible;\n  };\n\n  return (\n    <div className=\"message-view-container\">\n      {isLoading ? (\n        <Spinner type=\"search\" />\n      ) : (\n        <>\n          <div\n            onScroll={handleScroll}\n            className=\"message-view-active-chat-container\"\n          >\n            {messages.length > 0 &&\n              messages.map((message, i) => {\n                const lastMessageBool = messages.length - 1 === i + 1;\n                const userSentBool = userSent(currentUser, message);\n                const sameSenderAndNotCurrentUserBool =\n                  sameSenderAndNotCurrentUser(i, messages, currentUser);\n                const firstUnreadMessage =\n                  unreadMessages.length > 0 &&\n                  unreadMessages.at(-1).message._id === message._id;\n\n                return (\n                  <Fragment key={i}>\n                    {firstUnreadMessage && (\n                      <div\n                        ref={setRef}\n                        className=\"first-unread-message-container\"\n                      >\n                        <p>New</p>\n                      </div>\n                    )}\n\n                    <div\n                      ref={\n                        lastMessageBool && unreadMessages.length === 0\n                          ? setRef\n                          : null\n                      }\n                      style={i === 0 ? { paddingTop: '6px' } : {}}\n                      className={`message-view-message-container ${\n                        userSentBool ? 'user-sent' : ''\n                      }`}\n                    >\n                      <div\n                        className=\"message-view-message-image-container\"\n                        style={\n                          sameSenderAndNotCurrentUserBool || userSentBool\n                            ? { visibility: 'hidden' }\n                            : { marginTop: '2px' }\n                        }\n                      >\n                        <img\n                          height=\"100%\"\n                          src={message.sender.picture}\n                          alt=\"profile\"\n                        />\n                      </div>\n                      <div className=\"message-view-text-container\">\n                        <div className=\"message-view-text\">{message.text}</div>\n                        <div\n                          style={\n                            sameSenderAndNotCurrentUserBool || userSentBool\n                              ? { display: 'none' }\n                              : {}\n                          }\n                          className=\"message-view-text-info\"\n                        >\n                          <p>\n                            @{!userSentBool ? message.sender.userName : 'You'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </Fragment>\n                );\n              })}\n          </div>\n\n          {isTyping && (\n            <div className=\"lottie-container\">\n              {typers.length ? getTyperString(typers) : ''}\n              <Lottie\n                animationData={animationData}\n                loop={true}\n                autoplay={true}\n                style={{ height: '16px', display: 'block' }}\n              />\n            </div>\n          )}\n\n          <div\n            className=\"send-message-editable\"\n            data-text={`Message ${\n              activeChat[0].isGroupChat\n                ? activeChat[0].chatName\n                : generateChatNameForSoloChats(activeChat[0].users, currentUser)\n            }`}\n            contentEditable\n            onKeyDown={handleKeyDown}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MessageView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}