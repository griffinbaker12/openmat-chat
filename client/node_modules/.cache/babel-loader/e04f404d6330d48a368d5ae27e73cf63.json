{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/chat-view-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useAuthentication } from './authentication-context';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom'; // import { useSocket } from './socket-context';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatViewContext = /*#__PURE__*/createContext();\nexport const useChatView = () => {\n  _s();\n\n  return useContext(ChatViewContext);\n};\n\n_s(useChatView, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const SIDEBAR_CATEGORY_TYPE = {\n  conversations: 'conversations',\n  friends: 'friends'\n};\nexport const MODAL_TYPE = {\n  sidebar: 'sidebar',\n  chatInfo: 'chatInfo',\n  userInfo: 'userInfo'\n};\nexport const ChatViewProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [activeChat, setActiveChat] = useState([]);\n  const [search, setSearch] = useState('');\n  const [isChatViewLoading, setIsChatViewLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n  const [sideBarCategory, setSideBarCategory] = useState(SIDEBAR_CATEGORY_TYPE.conversations);\n  const [showModal, setShowModal] = useState(false);\n  const [showAddUserInfoDropdown, setShowAddUserInfoDropdown] = useState(false);\n  const [modalType, setModalType] = useState('');\n  const [chats, setChats] = useState([]);\n  const [activeUserInfo, setActiveUserInfo] = useState(null);\n  const [isActiveUserCurrentUser, setIsActiveUserCurrentUser] = useState(false);\n  const [showActiveUserWithinChatInfo, setShowActiveUserWithinChatInfo] = useState(false);\n  const [friends, setFriends] = useState([]);\n  const [activeView, setActiveView] = useState('chat');\n  const [windowDimensions, setWindowDimensions] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n  const [notifications, setNotifications] = useState([]);\n  const {\n    currentUser,\n    setCurrentUser,\n    setIsLoading\n  } = useAuthentication();\n  const navigate = useNavigate();\n\n  const closeModal = () => {\n    if (showAddUserInfoDropdown) {\n      setShowAddUserInfoDropdown(false);\n      return;\n    }\n\n    setShowModal(false);\n  };\n\n  const setUserInfoModal = async function (id) {\n    let currentUserFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (currentUserFlag) {\n      setActiveUserInfo(currentUser);\n      setIsActiveUserCurrentUser(true);\n      setShowActiveUserWithinChatInfo(true);\n      return;\n    }\n\n    const response = await fetch(`http://localhost:4000/api/user/getUserInfo?id=${id}`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${currentUser.token}`\n      }\n    });\n    const user = await response.json();\n    setActiveUserInfo(user);\n  };\n\n  const updateSearchValue = e => setSearch(e.target.value);\n\n  const fetchChats = useCallback(async function () {\n    let tokenForLogin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let userData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    console.log('fc');\n    setIsChatViewLoading(true);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(`http://localhost:4000/api/chat`, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${tokenForLogin || currentUser.token}`\n        }\n      });\n      const data = await response.json();\n      setIsChatViewLoading(false);\n      setIsLoading(false);\n      setChats(data);\n\n      if (tokenForLogin) {\n        navigate('/chat');\n        toast.success('Login success', {\n          position: 'bottom-center',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: 'dark'\n        });\n        setCurrentUser(userData);\n      }\n    } catch (e) {\n      setIsChatViewLoading(false);\n      toast.error('Error fetching chats', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark'\n      });\n    }\n  }, [currentUser, navigate, setIsLoading, setCurrentUser]);\n\n  const handleModal = modalType => {\n    setModalType(modalType);\n    setShowModal(true);\n  };\n\n  const handleSearchSubmit = async e => {\n    e.preventDefault();\n    if (!search) return;\n\n    try {\n      setIsChatViewLoading(true); // I almost like the feature where you keep the search text there so that you know what you searched, and then once you hit the x then the results unfilter and are based off of the time the last message was sent\n      // setSearch('');\n\n      const response = await fetch(`http://localhost:4000/api/user?search=${search}`, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n      const {\n        messages,\n        users\n      } = await response.json();\n      setIsChatViewLoading(false);\n      setSearchResults([{\n        messages,\n        users\n      }]);\n    } catch (e) {\n      toast.error('Error fetching results', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark'\n      });\n    }\n  }; // Fetch the chats once, and then otherwise just add the chats to the data, don't need to re-fetch or anything like that. Could keep this here or do something where you only fetch the chats and the friends once the user is actually signed in. That could also be a route where you just find these two things\n\n\n  useEffect(() => {\n    if (!currentUser) {\n      setChats([]);\n      setActiveChat([]);\n      return;\n    }\n\n    if (currentUser._id) {\n      console.log('inside the ue');\n      fetchChats();\n    }\n\n    return;\n  }, [currentUser, fetchChats, setIsLoading]);\n  useEffect(() => {\n    if (chats.length === 0) return;else {\n      const activeChat = chats[0];\n      setActiveChat([activeChat]);\n    }\n  }, [chats]);\n  useEffect(() => {\n    if (!currentUser) return;\n    setFriends(currentUser.friends);\n  }, [currentUser]);\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(ChatViewContext.Provider, {\n    value: {\n      activeChat,\n      setActiveChat,\n      handleModal,\n      closeModal,\n      handleSearchSubmit,\n      updateSearchValue,\n      chats,\n      setChats,\n      showModal,\n      setSideBarCategory,\n      sideBarCategory,\n      modalType,\n      fetchChats,\n      setShowModal,\n      showAddUserInfoDropdown,\n      setShowAddUserInfoDropdown,\n      setUserInfoModal,\n      activeUserInfo,\n      isActiveUserCurrentUser,\n      setIsActiveUserCurrentUser,\n      showActiveUserWithinChatInfo,\n      setShowActiveUserWithinChatInfo,\n      setActiveUserInfo,\n      isChatViewLoading,\n      activeView,\n      setActiveView,\n      windowDimensions,\n      notifications,\n      setNotifications,\n      setWindowDimensions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ChatViewProvider, \"tFV4hXojAFkdT4uO/YV2Vfvth5I=\", false, function () {\n  return [useAuthentication, useNavigate];\n});\n\n_c = ChatViewProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatViewProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useAuthentication","toast","useNavigate","ChatViewContext","useChatView","SIDEBAR_CATEGORY_TYPE","conversations","friends","MODAL_TYPE","sidebar","chatInfo","userInfo","ChatViewProvider","children","activeChat","setActiveChat","search","setSearch","isChatViewLoading","setIsChatViewLoading","searchResults","setSearchResults","sideBarCategory","setSideBarCategory","showModal","setShowModal","showAddUserInfoDropdown","setShowAddUserInfoDropdown","modalType","setModalType","chats","setChats","activeUserInfo","setActiveUserInfo","isActiveUserCurrentUser","setIsActiveUserCurrentUser","showActiveUserWithinChatInfo","setShowActiveUserWithinChatInfo","setFriends","activeView","setActiveView","windowDimensions","setWindowDimensions","height","window","innerHeight","width","innerWidth","notifications","setNotifications","currentUser","setCurrentUser","setIsLoading","navigate","closeModal","setUserInfoModal","id","currentUserFlag","response","fetch","method","headers","Authorization","token","user","json","updateSearchValue","e","target","value","fetchChats","tokenForLogin","userData","console","log","data","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","handleModal","handleSearchSubmit","preventDefault","messages","users","_id","length"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/contexts/chat-view-context.js"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { useAuthentication } from './authentication-context';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n// import { useSocket } from './socket-context';\n\nconst ChatViewContext = createContext();\n\nexport const useChatView = () => useContext(ChatViewContext);\n\nexport const SIDEBAR_CATEGORY_TYPE = {\n  conversations: 'conversations',\n  friends: 'friends',\n};\n\nexport const MODAL_TYPE = {\n  sidebar: 'sidebar',\n  chatInfo: 'chatInfo',\n  userInfo: 'userInfo',\n};\n\nexport const ChatViewProvider = ({ children }) => {\n  const [activeChat, setActiveChat] = useState([]);\n  const [search, setSearch] = useState('');\n  const [isChatViewLoading, setIsChatViewLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n  const [sideBarCategory, setSideBarCategory] = useState(\n    SIDEBAR_CATEGORY_TYPE.conversations\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [showAddUserInfoDropdown, setShowAddUserInfoDropdown] = useState(false);\n  const [modalType, setModalType] = useState('');\n  const [chats, setChats] = useState([]);\n  const [activeUserInfo, setActiveUserInfo] = useState(null);\n  const [isActiveUserCurrentUser, setIsActiveUserCurrentUser] = useState(false);\n  const [showActiveUserWithinChatInfo, setShowActiveUserWithinChatInfo] =\n    useState(false);\n  const [friends, setFriends] = useState([]);\n  const [activeView, setActiveView] = useState('chat');\n  const [windowDimensions, setWindowDimensions] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n  const [notifications, setNotifications] = useState([]);\n\n  const { currentUser, setCurrentUser, setIsLoading } = useAuthentication();\n  const navigate = useNavigate();\n\n  const closeModal = () => {\n    if (showAddUserInfoDropdown) {\n      setShowAddUserInfoDropdown(false);\n      return;\n    }\n    setShowModal(false);\n  };\n\n  const setUserInfoModal = async (id, currentUserFlag = null) => {\n    if (currentUserFlag) {\n      setActiveUserInfo(currentUser);\n      setIsActiveUserCurrentUser(true);\n      setShowActiveUserWithinChatInfo(true);\n      return;\n    }\n    const response = await fetch(\n      `http://localhost:4000/api/user/getUserInfo?id=${id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const user = await response.json();\n    setActiveUserInfo(user);\n  };\n\n  const updateSearchValue = e => setSearch(e.target.value);\n\n  const fetchChats = useCallback(\n    async (tokenForLogin = null, userData = null) => {\n      console.log('fc');\n      setIsChatViewLoading(true);\n      setIsLoading(true);\n      try {\n        const response = await fetch(`http://localhost:4000/api/chat`, {\n          method: 'get',\n          headers: {\n            Authorization: `Bearer ${tokenForLogin || currentUser.token}`,\n          },\n        });\n        const data = await response.json();\n        setIsChatViewLoading(false);\n        setIsLoading(false);\n        setChats(data);\n        if (tokenForLogin) {\n          navigate('/chat');\n          toast.success('Login success', {\n            position: 'bottom-center',\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: 'dark',\n          });\n          setCurrentUser(userData);\n        }\n      } catch (e) {\n        setIsChatViewLoading(false);\n        toast.error('Error fetching chats', {\n          position: 'bottom-center',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: 'dark',\n        });\n      }\n    },\n    [currentUser, navigate, setIsLoading, setCurrentUser]\n  );\n\n  const handleModal = modalType => {\n    setModalType(modalType);\n    setShowModal(true);\n  };\n\n  const handleSearchSubmit = async e => {\n    e.preventDefault();\n    if (!search) return;\n\n    try {\n      setIsChatViewLoading(true);\n\n      // I almost like the feature where you keep the search text there so that you know what you searched, and then once you hit the x then the results unfilter and are based off of the time the last message was sent\n      // setSearch('');\n\n      const response = await fetch(\n        `http://localhost:4000/api/user?search=${search}`,\n        {\n          method: 'get',\n          headers: { Authorization: `Bearer ${currentUser.token}` },\n        }\n      );\n      const { messages, users } = await response.json();\n      setIsChatViewLoading(false);\n      setSearchResults([{ messages, users }]);\n    } catch (e) {\n      toast.error('Error fetching results', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n    }\n  };\n\n  // Fetch the chats once, and then otherwise just add the chats to the data, don't need to re-fetch or anything like that. Could keep this here or do something where you only fetch the chats and the friends once the user is actually signed in. That could also be a route where you just find these two things\n\n  useEffect(() => {\n    if (!currentUser) {\n      setChats([]);\n      setActiveChat([]);\n      return;\n    }\n    if (currentUser._id) {\n      console.log('inside the ue');\n      fetchChats();\n    }\n    return;\n  }, [currentUser, fetchChats, setIsLoading]);\n\n  useEffect(() => {\n    if (chats.length === 0) return;\n    else {\n      const activeChat = chats[0];\n      setActiveChat([activeChat]);\n    }\n  }, [chats]);\n\n  useEffect(() => {\n    if (!currentUser) return;\n    setFriends(currentUser.friends);\n  }, [currentUser]);\n\n  useEffect(() => {});\n\n  return (\n    <ChatViewContext.Provider\n      value={{\n        activeChat,\n        setActiveChat,\n        handleModal,\n        closeModal,\n        handleSearchSubmit,\n        updateSearchValue,\n        chats,\n        setChats,\n        showModal,\n        setSideBarCategory,\n        sideBarCategory,\n        modalType,\n        fetchChats,\n        setShowModal,\n        showAddUserInfoDropdown,\n        setShowAddUserInfoDropdown,\n        setUserInfoModal,\n        activeUserInfo,\n        isActiveUserCurrentUser,\n        setIsActiveUserCurrentUser,\n        showActiveUserWithinChatInfo,\n        setShowActiveUserWithinChatInfo,\n        setActiveUserInfo,\n        isChatViewLoading,\n        activeView,\n        setActiveView,\n        windowDimensions,\n        notifications,\n        setNotifications,\n        setWindowDimensions,\n      }}\n    >\n      {children}\n    </ChatViewContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}