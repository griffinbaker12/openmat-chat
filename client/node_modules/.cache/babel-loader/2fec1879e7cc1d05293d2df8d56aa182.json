{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const useConversations = () => {\n  _s();\n\n  return useContext(ConversationsContext);\n};\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    userName,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useState([]);\n  const [activeConversation, setActiveConversation] = useState(); // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients => setConversations(prevState => [...prevState, {\n    recipients,\n    messages: []\n  }]);\n\n  const setConversation = conversationAttribute => setActiveConversation(conversationAttribute); // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n\n  const addMessageToConversation = _ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevState => {\n      const newConversationsArray = conversations.map(conversation => {\n        if (arrEqualityTest(conversation.recipients, recipients)) {\n          const currentMessagesArray = conversation.messages;\n          currentMessagesArray.push({\n            sender,\n            text\n          });\n          console.log('current messages array', currentMessagesArray);\n          return { ...conversation,\n            messages: [conversation.messages.push({\n              sender,\n              text\n            })]\n          };\n        }\n\n        return conversation;\n      });\n      console.log(newConversationsArray);\n      return [...newConversationsArray];\n    });\n  };\n\n  const sendMessage = (recipients, text) => {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: userName\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation,\n      activeConversation,\n      setConversation,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}; // Helper functions\n\n_s2(ConversationsProvider, \"i1cu00Pq2I8ig2GI5V8ZYzbNSQI=\");\n\n_c = ConversationsProvider;\n\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every((recipient, i) => recipient === mappedRecipients[i]);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["createContext","useContext","useState","ConversationsContext","useConversations","ConversationsProvider","userName","children","conversations","setConversations","activeConversation","setActiveConversation","createConversation","recipients","prevState","messages","setConversation","conversationAttribute","addMessageToConversation","text","sender","newConversationsArray","map","conversation","arrEqualityTest","currentMessagesArray","push","console","log","sendMessage","mappedRecipients","receivedRecipients","length","sort","every","recipient","i"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nconst ConversationsContext = createContext();\n\nexport const useConversations = () => useContext(ConversationsContext);\n\nexport const ConversationsProvider = ({ userName, children }) => {\n  const [conversations, setConversations] = useState([]);\n  const [activeConversation, setActiveConversation] = useState();\n\n  // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients =>\n    setConversations(prevState => [...prevState, { recipients, messages: [] }]);\n\n  const setConversation = conversationAttribute =>\n    setActiveConversation(conversationAttribute);\n  // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n  const addMessageToConversation = ({ recipients, text, sender }) => {\n    setConversations(prevState => {\n      const newConversationsArray = conversations.map(conversation => {\n        if (arrEqualityTest(conversation.recipients, recipients)) {\n          const currentMessagesArray = conversation.messages;\n          currentMessagesArray.push({ sender, text });\n          console.log('current messages array', currentMessagesArray);\n          return {\n            ...conversation,\n            messages: [conversation.messages.push({ sender, text })],\n          };\n        }\n        return conversation;\n      });\n      console.log(newConversationsArray);\n      return [...newConversationsArray];\n    });\n  };\n\n  const sendMessage = (recipients, text) => {\n    addMessageToConversation({ recipients, text, sender: userName });\n  };\n\n  return (\n    <ConversationsContext.Provider\n      value={{\n        conversations,\n        createConversation,\n        activeConversation,\n        setConversation,\n        sendMessage,\n      }}\n    >\n      {children}\n    </ConversationsContext.Provider>\n  );\n};\n\n// Helper functions\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every(\n    (recipient, i) => recipient === mappedRecipients[i]\n  );\n};\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,MAAMC,oBAAoB,gBAAGH,aAAa,EAA1C;AAEA,OAAO,MAAMI,gBAAgB,GAAG;EAAA;;EAAA,OAAMH,UAAU,CAACE,oBAAD,CAAhB;AAAA,CAAzB;;GAAMC,gB;;AAEb,OAAO,MAAMC,qBAAqB,GAAG,QAA4B;EAAA;;EAAA,IAA3B;IAAEC,QAAF;IAAYC;EAAZ,CAA2B;EAC/D,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,EAA5D,CAF+D,CAI/D;;EAEA,MAAMU,kBAAkB,GAAGC,UAAU,IACnCJ,gBAAgB,CAACK,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe;IAAED,UAAF;IAAcE,QAAQ,EAAE;EAAxB,CAAf,CAAd,CADlB;;EAGA,MAAMC,eAAe,GAAGC,qBAAqB,IAC3CN,qBAAqB,CAACM,qBAAD,CADvB,CAT+D,CAW/D;EACA;;;EAEA,MAAMC,wBAAwB,GAAG,SAAkC;IAAA,IAAjC;MAAEL,UAAF;MAAcM,IAAd;MAAoBC;IAApB,CAAiC;IACjEX,gBAAgB,CAACK,SAAS,IAAI;MAC5B,MAAMO,qBAAqB,GAAGb,aAAa,CAACc,GAAd,CAAkBC,YAAY,IAAI;QAC9D,IAAIC,eAAe,CAACD,YAAY,CAACV,UAAd,EAA0BA,UAA1B,CAAnB,EAA0D;UACxD,MAAMY,oBAAoB,GAAGF,YAAY,CAACR,QAA1C;UACAU,oBAAoB,CAACC,IAArB,CAA0B;YAAEN,MAAF;YAAUD;UAAV,CAA1B;UACAQ,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,oBAAtC;UACA,OAAO,EACL,GAAGF,YADE;YAELR,QAAQ,EAAE,CAACQ,YAAY,CAACR,QAAb,CAAsBW,IAAtB,CAA2B;cAAEN,MAAF;cAAUD;YAAV,CAA3B,CAAD;UAFL,CAAP;QAID;;QACD,OAAOI,YAAP;MACD,CAX6B,CAA9B;MAYAI,OAAO,CAACC,GAAR,CAAYP,qBAAZ;MACA,OAAO,CAAC,GAAGA,qBAAJ,CAAP;IACD,CAfe,CAAhB;EAgBD,CAjBD;;EAmBA,MAAMQ,WAAW,GAAG,CAAChB,UAAD,EAAaM,IAAb,KAAsB;IACxCD,wBAAwB,CAAC;MAAEL,UAAF;MAAcM,IAAd;MAAoBC,MAAM,EAAEd;IAA5B,CAAD,CAAxB;EACD,CAFD;;EAIA,oBACE,QAAC,oBAAD,CAAsB,QAAtB;IACE,KAAK,EAAE;MACLE,aADK;MAELI,kBAFK;MAGLF,kBAHK;MAILM,eAJK;MAKLa;IALK,CADT;IAAA,UASGtB;EATH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAlDM,C,CAoDP;;IApDaF,qB;;KAAAA,qB;;AAqDb,MAAMmB,eAAe,GAAG,CAACM,gBAAD,EAAmBC,kBAAnB,KAA0C;EAChE,IAAID,gBAAgB,CAACE,MAAjB,KAA4BD,kBAAkB,CAACC,MAAnD,EAA2D,OAAO,KAAP;EAC3DF,gBAAgB,CAACG,IAAjB;EACAF,kBAAkB,CAACE,IAAnB;EACA,OAAOF,kBAAkB,CAACG,KAAnB,CACL,CAACC,SAAD,EAAYC,CAAZ,KAAkBD,SAAS,KAAKL,gBAAgB,CAACM,CAAD,CAD3C,CAAP;AAGD,CAPD"},"metadata":{},"sourceType":"module"}