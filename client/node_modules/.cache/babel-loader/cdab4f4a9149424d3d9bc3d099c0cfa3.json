{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const useConversations = () => {\n  _s();\n\n  return useContext(ConversationsContext);\n};\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    userName,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationIndex, setActiveConversationIndex] = useState();\n  const currentConversation = conversations[activeConversationIndex]; // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients => setConversations(prevState => [...prevState, {\n    recipients,\n    messages: []\n  }]);\n\n  const setConversationIndex = conversationAttribute => setActiveConversationIndex(conversationAttribute); // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n\n  const addMessageToConversation = _ref2 => {\n    let {\n      recipients,\n      text,\n      sender,\n      time\n    } = _ref2;\n    setConversations(prevState => {\n      const newConversationsArray = prevState.map(conversation => {\n        if (arrEqualityTest(conversation.recipients, recipients)) {\n          return { ...conversation,\n            messages: [...conversation.messages, {\n              sender,\n              text,\n              userSent: userName === sender,\n              timeStamp: time\n            }]\n          };\n        }\n\n        return conversation;\n      });\n      return [...newConversationsArray];\n    });\n  };\n\n  const sendMessage = (recipients, text, time) => {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: userName,\n      time\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation,\n      currentConversation,\n      activeConversationIndex,\n      setConversationIndex,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}; // Helper functions\n\n_s2(ConversationsProvider, \"bO8Et9GIyOX+O6xKJUmQl23RDu4=\");\n\n_c = ConversationsProvider;\n\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every((recipient, i) => recipient === mappedRecipients[i]);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["createContext","useContext","useState","ConversationsContext","useConversations","ConversationsProvider","userName","children","conversations","setConversations","activeConversationIndex","setActiveConversationIndex","currentConversation","createConversation","recipients","prevState","messages","setConversationIndex","conversationAttribute","addMessageToConversation","text","sender","time","newConversationsArray","map","conversation","arrEqualityTest","userSent","timeStamp","sendMessage","mappedRecipients","receivedRecipients","length","sort","every","recipient","i"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nconst ConversationsContext = createContext();\n\nexport const useConversations = () => useContext(ConversationsContext);\n\nexport const ConversationsProvider = ({ userName, children }) => {\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationIndex, setActiveConversationIndex] = useState();\n  const currentConversation = conversations[activeConversationIndex];\n\n  // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients =>\n    setConversations(prevState => [...prevState, { recipients, messages: [] }]);\n\n  const setConversationIndex = conversationAttribute =>\n    setActiveConversationIndex(conversationAttribute);\n  // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n  const addMessageToConversation = ({ recipients, text, sender, time }) => {\n    setConversations(prevState => {\n      const newConversationsArray = prevState.map(conversation => {\n        if (arrEqualityTest(conversation.recipients, recipients)) {\n          return {\n            ...conversation,\n            messages: [\n              ...conversation.messages,\n              {\n                sender,\n                text,\n                userSent: userName === sender,\n                timeStamp: time,\n              },\n            ],\n          };\n        }\n        return conversation;\n      });\n      return [...newConversationsArray];\n    });\n  };\n\n  const sendMessage = (recipients, text, time) => {\n    addMessageToConversation({ recipients, text, sender: userName, time });\n  };\n\n  return (\n    <ConversationsContext.Provider\n      value={{\n        conversations,\n        createConversation,\n        currentConversation,\n        activeConversationIndex,\n        setConversationIndex,\n        sendMessage,\n      }}\n    >\n      {children}\n    </ConversationsContext.Provider>\n  );\n};\n\n// Helper functions\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every(\n    (recipient, i) => recipient === mappedRecipients[i]\n  );\n};\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,MAAMC,oBAAoB,gBAAGH,aAAa,EAA1C;AAEA,OAAO,MAAMI,gBAAgB,GAAG;EAAA;;EAAA,OAAMH,UAAU,CAACE,oBAAD,CAAhB;AAAA,CAAzB;;GAAMC,gB;;AAEb,OAAO,MAAMC,qBAAqB,GAAG,QAA4B;EAAA;;EAAA,IAA3B;IAAEC,QAAF;IAAYC;EAAZ,CAA2B;EAC/D,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACQ,uBAAD,EAA0BC,0BAA1B,IAAwDT,QAAQ,EAAtE;EACA,MAAMU,mBAAmB,GAAGJ,aAAa,CAACE,uBAAD,CAAzC,CAH+D,CAK/D;;EAEA,MAAMG,kBAAkB,GAAGC,UAAU,IACnCL,gBAAgB,CAACM,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe;IAAED,UAAF;IAAcE,QAAQ,EAAE;EAAxB,CAAf,CAAd,CADlB;;EAGA,MAAMC,oBAAoB,GAAGC,qBAAqB,IAChDP,0BAA0B,CAACO,qBAAD,CAD5B,CAV+D,CAY/D;EACA;;;EAEA,MAAMC,wBAAwB,GAAG,SAAwC;IAAA,IAAvC;MAAEL,UAAF;MAAcM,IAAd;MAAoBC,MAApB;MAA4BC;IAA5B,CAAuC;IACvEb,gBAAgB,CAACM,SAAS,IAAI;MAC5B,MAAMQ,qBAAqB,GAAGR,SAAS,CAACS,GAAV,CAAcC,YAAY,IAAI;QAC1D,IAAIC,eAAe,CAACD,YAAY,CAACX,UAAd,EAA0BA,UAA1B,CAAnB,EAA0D;UACxD,OAAO,EACL,GAAGW,YADE;YAELT,QAAQ,EAAE,CACR,GAAGS,YAAY,CAACT,QADR,EAER;cACEK,MADF;cAEED,IAFF;cAGEO,QAAQ,EAAErB,QAAQ,KAAKe,MAHzB;cAIEO,SAAS,EAAEN;YAJb,CAFQ;UAFL,CAAP;QAYD;;QACD,OAAOG,YAAP;MACD,CAhB6B,CAA9B;MAiBA,OAAO,CAAC,GAAGF,qBAAJ,CAAP;IACD,CAnBe,CAAhB;EAoBD,CArBD;;EAuBA,MAAMM,WAAW,GAAG,CAACf,UAAD,EAAaM,IAAb,EAAmBE,IAAnB,KAA4B;IAC9CH,wBAAwB,CAAC;MAAEL,UAAF;MAAcM,IAAd;MAAoBC,MAAM,EAAEf,QAA5B;MAAsCgB;IAAtC,CAAD,CAAxB;EACD,CAFD;;EAIA,oBACE,QAAC,oBAAD,CAAsB,QAAtB;IACE,KAAK,EAAE;MACLd,aADK;MAELK,kBAFK;MAGLD,mBAHK;MAILF,uBAJK;MAKLO,oBALK;MAMLY;IANK,CADT;IAAA,UAUGtB;EAVH;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAxDM,C,CA0DP;;IA1DaF,qB;;KAAAA,qB;;AA2Db,MAAMqB,eAAe,GAAG,CAACI,gBAAD,EAAmBC,kBAAnB,KAA0C;EAChE,IAAID,gBAAgB,CAACE,MAAjB,KAA4BD,kBAAkB,CAACC,MAAnD,EAA2D,OAAO,KAAP;EAC3DF,gBAAgB,CAACG,IAAjB;EACAF,kBAAkB,CAACE,IAAnB;EACA,OAAOF,kBAAkB,CAACG,KAAnB,CACL,CAACC,SAAD,EAAYC,CAAZ,KAAkBD,SAAS,KAAKL,gBAAgB,CAACM,CAAD,CAD3C,CAAP;AAGD,CAPD"},"metadata":{},"sourceType":"module"}