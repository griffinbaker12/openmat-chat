{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/register/register.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport Spinner from '../spinner/spinner.component';\nimport { toast } from 'react-toastify';\nimport './register.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  const [picCloudUrl, setPicCloudUrl] = useState();\n  const [text, setText] = useState({\n    name: '',\n    email: '',\n    userName: '',\n    password: ''\n  });\n  const [userNameUnique, setUserNameUnique] = useState();\n  const [isUserNameResultShowing, setIsUserNameResultShowing] = useState(false);\n  const [isPicLoading, setIsPicLoading] = useState(false);\n  const navigate = useNavigate(); // General idea here as I surmise is that you render this toast container component that is a vertical flex of a bunch of different toasts that may pop up and then you handle which ones you render and when, which type, text, etc...\n  // const [toastType, setToastType] = useState();\n\n  const {\n    changeAuth,\n    setCurrentUser,\n    isLoading,\n    setIsLoading\n  } = useAuthentication();\n\n  const handleRegistration = () => {\n    // If the user does not submit all of the details, then could display a toast telling them to do so.\n    if (!text.name || !text.email || !text.password) {\n      toast.error('Please enter all fields', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark'\n      });\n      return;\n    } // Could make a separate is loading for the component as a whole\n\n\n    setIsLoading(true);\n    fetch('http://localhost:4000/api/user', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: text.email,\n        password: text.password,\n        name: text.name,\n        userName: text.userName,\n        picture: picCloudUrl\n      })\n    }).then(res => res.json()).then(data => {\n      setCurrentUser(data); // Until we and if we use redux with the persisted state, but otherwise we can just check to see if there is a current user\n\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      setIsLoading(false);\n      navigate('/chat');\n      toast('Registration successful'); // Here you would render the toast saying that the registration was a success\n      // Using chakra ui for something like this would be much easier; else would require you to implement logic on the success state of various different requests and then render the toast accordingly\n    }).catch(err => {\n      setIsLoading(false);\n      console.log(err); // Here you would render that toast saying that there was a problem registering a user, most likely because the user credentials already exists\n    }); // Definitely room here as well for showing a toast icon that will pop up when the user either is or is not successful in signing up and for what reason. For that reason alone and how clean it is it makes me want to use chakra ui.\n  };\n\n  const handleChange = async e => {\n    const name = e.target.getAttribute('name');\n    setText(prevState => {\n      return { ...prevState,\n        [name]: e.target.value\n      };\n    });\n    if (name !== 'userName') return;\n    const userName = e.target.value;\n\n    if (userName === '') {\n      setIsUserNameResultShowing(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(`http://localhost:4000/api/user/validateUserName`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userName\n        })\n      });\n      const exists = await response.json();\n      setUserNameUnique(!exists);\n      setIsUserNameResultShowing(true);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // https://api.cloudinary.com/v1_1/dhogrpl6c/upload\n\n\n  const handleFileInputChange = e => {\n    const picture = e.target.files[0];\n\n    if (e.target.files) {\n      postImageDetails(picture);\n    } else return;\n  };\n\n  const handleImageUpload = () => {\n    // Simulate a click on hidden button\n    hiddenInputRef.current.click();\n  };\n\n  const postImageDetails = picture => {\n    setIsPicLoading(true);\n\n    if (!picture) {\n      setIsPicLoading(false);\n      return;\n    }\n\n    const data = new FormData();\n    data.append('file', picture);\n    data.append('upload_preset', 'chat-app');\n    fetch('https://api.cloudinary.com/v1_1/dhogrpl6c/image/upload', {\n      method: 'post',\n      body: data\n    }).then(res => res.json()).then(data => {\n      setPicCloudUrl(data.url.toString());\n      setIsPicLoading(false);\n      toastRef.current.show(); // setToastType(TOAST_TYPE.success);\n    }).catch(err => {\n      setIsPicLoading(false); // toastRef.current.show();\n      // setToastType(TOAST_TYPE.failure);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"register-article\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"register-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register-measure\",\n        children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n          className: \"register-fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            className: \"register-legend\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-legend-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              className: \"register-legend-label\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: handleChange,\n              className: \"register-legend-input\",\n              type: \"text\",\n              name: \"name\",\n              id: \"name\",\n              required: true,\n              value: text.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-legend-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              className: \"register-legend-label\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: handleChange,\n              className: \"register-legend-input\",\n              type: \"email\",\n              name: \"email\",\n              id: \"email\",\n              required: true,\n              value: text.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-legend-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"userName\",\n              className: \"register-legend-label\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: handleChange,\n              className: \"register-legend-input\",\n              type: \"text\",\n              name: \"userName\",\n              id: \"userName\",\n              required: true,\n              value: text.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), isUserNameResultShowing && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `username-checkmark-container ${userNameUnique ? 'available' : 'not-available'}`,\n              children: userNameUnique ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"username-indicator\",\n                  style: {\n                    fontSize: '20px'\n                  },\n                  children: \"\\u2713\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"username-response-text\",\n                  children: \"Username is available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"username-indicator\",\n                  children: \"\\u2715\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"username-response-text\",\n                  children: \"Username not available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `register-legend-input-container ${isUserNameResultShowing ? 'username-showing' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              className: \"register-legend-label\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: handleChange,\n              className: \"register-legend-input\",\n              type: \"password\",\n              name: \"password\",\n              id: \"password\",\n              required: true,\n              value: text.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"register-legend-input-container-file\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: hiddenInputRef,\n              type: \"file\",\n              accept: \"image/jpeg, image/png\",\n              id: \"profile-picture\",\n              onChange: handleFileInputChange,\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleImageUpload,\n              type: \"button\",\n              id: \"profile-picture-button\",\n              children: isPicLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 33\n              }, this) : 'Select Profile Picture Image'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profile-picture-text-container\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                id: \"profile-picture-text\",\n                children: picCloudUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: picCloudUrl,\n                  alt: \"profile\",\n                  style: {\n                    height: '80px',\n                    width: 'auto',\n                    marginTop: '5px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this) : 'No image uploaded yet'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"register-input\",\n          type: \"button\",\n          onClick: handleRegistration,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 26\n          }, this) : 'Sign Up'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: changeAuth,\n          className: \"sign-in-text\",\n          children: \"Back to Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"1PrtwS9M9FyS4cuujYjjbtPPwyM=\", false, function () {\n  return [useNavigate, useAuthentication];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useRef","useState","useNavigate","useAuthentication","Spinner","toast","Register","picCloudUrl","setPicCloudUrl","text","setText","name","email","userName","password","userNameUnique","setUserNameUnique","isUserNameResultShowing","setIsUserNameResultShowing","isPicLoading","setIsPicLoading","navigate","changeAuth","setCurrentUser","isLoading","setIsLoading","handleRegistration","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","fetch","method","headers","body","JSON","stringify","picture","then","res","json","data","localStorage","setItem","catch","err","console","log","handleChange","e","target","getAttribute","prevState","value","response","exists","handleFileInputChange","files","postImageDetails","handleImageUpload","hiddenInputRef","current","click","FormData","append","url","toString","toastRef","show","fontSize","height","width","marginTop"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/register/register.component.jsx"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport Spinner from '../spinner/spinner.component';\nimport { toast } from 'react-toastify';\nimport './register.styles.scss';\n\nconst Register = () => {\n  const [picCloudUrl, setPicCloudUrl] = useState();\n  const [text, setText] = useState({\n    name: '',\n    email: '',\n    userName: '',\n    password: '',\n  });\n  const [userNameUnique, setUserNameUnique] = useState();\n  const [isUserNameResultShowing, setIsUserNameResultShowing] = useState(false);\n  const [isPicLoading, setIsPicLoading] = useState(false);\n\n  const navigate = useNavigate();\n\n  // General idea here as I surmise is that you render this toast container component that is a vertical flex of a bunch of different toasts that may pop up and then you handle which ones you render and when, which type, text, etc...\n  // const [toastType, setToastType] = useState();\n\n  const { changeAuth, setCurrentUser, isLoading, setIsLoading } =\n    useAuthentication();\n\n  const handleRegistration = () => {\n    // If the user does not submit all of the details, then could display a toast telling them to do so.\n    if (!text.name || !text.email || !text.password) {\n      toast.error('Please enter all fields', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n      return;\n    }\n    // Could make a separate is loading for the component as a whole\n    setIsLoading(true);\n    fetch('http://localhost:4000/api/user', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: text.email,\n        password: text.password,\n        name: text.name,\n        userName: text.userName,\n        picture: picCloudUrl,\n      }),\n    })\n      .then(res => res.json())\n      .then(data => {\n        setCurrentUser(data);\n        // Until we and if we use redux with the persisted state, but otherwise we can just check to see if there is a current user\n        localStorage.setItem('userInfo', JSON.stringify(data));\n        setIsLoading(false);\n        navigate('/chat');\n        toast('Registration successful');\n        // Here you would render the toast saying that the registration was a success\n\n        // Using chakra ui for something like this would be much easier; else would require you to implement logic on the success state of various different requests and then render the toast accordingly\n      })\n      .catch(err => {\n        setIsLoading(false);\n        console.log(err);\n        // Here you would render that toast saying that there was a problem registering a user, most likely because the user credentials already exists\n      });\n\n    // Definitely room here as well for showing a toast icon that will pop up when the user either is or is not successful in signing up and for what reason. For that reason alone and how clean it is it makes me want to use chakra ui.\n  };\n\n  const handleChange = async e => {\n    const name = e.target.getAttribute('name');\n    setText(prevState => {\n      return {\n        ...prevState,\n        [name]: e.target.value,\n      };\n    });\n    if (name !== 'userName') return;\n    const userName = e.target.value;\n    if (userName === '') {\n      setIsUserNameResultShowing(false);\n      return;\n    }\n    try {\n      const response = await fetch(\n        `http://localhost:4000/api/user/validateUserName`,\n        {\n          method: 'post',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            userName,\n          }),\n        }\n      );\n      const exists = await response.json();\n      setUserNameUnique(!exists);\n      setIsUserNameResultShowing(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // https://api.cloudinary.com/v1_1/dhogrpl6c/upload\n\n  const handleFileInputChange = e => {\n    const picture = e.target.files[0];\n    if (e.target.files) {\n      postImageDetails(picture);\n    } else return;\n  };\n\n  const handleImageUpload = () => {\n    // Simulate a click on hidden button\n    hiddenInputRef.current.click();\n  };\n\n  const postImageDetails = picture => {\n    setIsPicLoading(true);\n    if (!picture) {\n      setIsPicLoading(false);\n      return;\n    }\n\n    const data = new FormData();\n    data.append('file', picture);\n    data.append('upload_preset', 'chat-app');\n\n    fetch('https://api.cloudinary.com/v1_1/dhogrpl6c/image/upload', {\n      method: 'post',\n      body: data,\n    })\n      .then(res => res.json())\n      .then(data => {\n        setPicCloudUrl(data.url.toString());\n        setIsPicLoading(false);\n        toastRef.current.show();\n        // setToastType(TOAST_TYPE.success);\n      })\n      .catch(err => {\n        setIsPicLoading(false);\n        // toastRef.current.show();\n        // setToastType(TOAST_TYPE.failure);\n      });\n  };\n\n  return (\n    <article className=\"register-article\">\n      <main className=\"register-main\">\n        <div className=\"register-measure\">\n          <fieldset className=\"register-fieldset\">\n            <legend className=\"register-legend\">Register</legend>\n            <div className=\"register-legend-input-container\">\n              <label htmlFor=\"name\" className=\"register-legend-label\">\n                Name\n              </label>\n              <input\n                onChange={handleChange}\n                className=\"register-legend-input\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                required\n                value={text.name}\n              />\n            </div>\n            <div className=\"register-legend-input-container\">\n              <label htmlFor=\"email\" className=\"register-legend-label\">\n                Email\n              </label>\n              <input\n                onChange={handleChange}\n                className=\"register-legend-input\"\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                required\n                value={text.email}\n              />\n            </div>\n            <div className=\"register-legend-input-container\">\n              <label htmlFor=\"userName\" className=\"register-legend-label\">\n                Username\n              </label>\n              <input\n                onChange={handleChange}\n                className=\"register-legend-input\"\n                type=\"text\"\n                name=\"userName\"\n                id=\"userName\"\n                required\n                value={text.userName}\n              />\n              {isUserNameResultShowing && (\n                <div\n                  className={`username-checkmark-container ${\n                    userNameUnique ? 'available' : 'not-available'\n                  }`}\n                >\n                  {userNameUnique ? (\n                    <>\n                      <span\n                        className=\"username-indicator\"\n                        style={{ fontSize: '20px' }}\n                      >\n                        &#10003;\n                      </span>\n                      <span className=\"username-response-text\">\n                        Username is available\n                      </span>\n                    </>\n                  ) : (\n                    <>\n                      <span className=\"username-indicator\">&#x2715;</span>\n                      <span className=\"username-response-text\">\n                        Username not available\n                      </span>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n            <div\n              className={`register-legend-input-container ${\n                isUserNameResultShowing ? 'username-showing' : ''\n              }`}\n            >\n              <label htmlFor=\"password\" className=\"register-legend-label\">\n                Password\n              </label>\n              <input\n                onChange={handleChange}\n                className=\"register-legend-input\"\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                required\n                value={text.password}\n              />\n            </div>\n            <div className=\"register-legend-input-container-file\">\n              <input\n                ref={hiddenInputRef}\n                type=\"file\"\n                accept=\"image/jpeg, image/png\"\n                id=\"profile-picture\"\n                onChange={handleFileInputChange}\n                hidden\n              />\n              <button\n                onClick={handleImageUpload}\n                type=\"button\"\n                id=\"profile-picture-button\"\n              >\n                {isPicLoading ? <Spinner /> : 'Select Profile Picture Image'}\n              </button>\n              <div className=\"profile-picture-text-container\">\n                <span id=\"profile-picture-text\">\n                  {picCloudUrl ? (\n                    <img\n                      src={picCloudUrl}\n                      alt=\"profile\"\n                      style={{\n                        height: '80px',\n                        width: 'auto',\n                        marginTop: '5px',\n                      }}\n                    />\n                  ) : (\n                    'No image uploaded yet'\n                  )}\n                </span>\n              </div>\n            </div>\n          </fieldset>\n          <button\n            className=\"register-input\"\n            type=\"button\"\n            onClick={handleRegistration}\n          >\n            {isLoading ? <Spinner /> : 'Sign Up'}\n          </button>\n          <p onClick={changeAuth} className=\"sign-in-text\">\n            Back to Sign In\n          </p>\n          {/* <Toast\n            ref={toastRef}\n            message={\n              toastType === TOAST_TYPE.success\n                ? 'Image upload successful'\n                : 'Error uploading image'\n            }\n            type={\n              toastType === TOAST_TYPE.success\n                ? TOAST_TYPE.success\n                : TOAST_TYPE.failure\n            }\n          /> */}\n        </div>\n      </main>\n    </article>\n  );\n};\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}