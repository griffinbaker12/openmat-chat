{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport { generateChatNameForSoloChats, getUsersOnlineCount } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatPreview = () => {\n  _s();\n\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions,\n    setActiveView,\n    setChats\n  } = useChatView();\n  const {\n    socket\n  } = useSocket();\n  console.log(chats);\n  const {\n    onlineUsers\n  } = useSocket();\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name'); // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  useEffect(() => {\n    socket.on('updated chat', updatedChat => {\n      setChats(prevState => {\n        return prevState.map(chat => {\n          if (chat._id !== updatedChat._id) return chat;else return updatedChat;\n        });\n      });\n    });\n    return socket.off('updated chat');\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-preview-container\",\n    onClick: handleClick,\n    children: chats.length > 0 && chats.map(_ref => {\n      var _activeChat$;\n\n      let {\n        _id,\n        chatName,\n        users,\n        isGroupChat\n      } = _ref;\n      const userOnlineCount = getUsersOnlineCount(onlineUsers, users, currentUser);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        name: _id,\n        className: `chat-preview-list ${_id === ((_activeChat$ = activeChat[0]) === null || _activeChat$ === void 0 ? void 0 : _activeChat$._id) ? 'active' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-preview-list-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-preview-list-item-name-and-online\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: !isGroupChat ? generateChatNameForSoloChats(users, currentUser) : chatName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), userOnlineCount > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-preview-list-circle-and-count-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"online-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: userOnlineCount === 1 && !isGroupChat ? 'Online' : `${userOnlineCount} Online`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-preview-list-circle-and-count-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"offline-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\" \", !isGroupChat ? 'Offline' : `0 Online`]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatPreview, \"ZAJMn5ILKyK9tvH/VeqwLD3xH1Q=\", false, function () {\n  return [useAuthentication, useChatView, useSocket, useSocket];\n});\n\n_c = ChatPreview;\nexport default ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"names":["useCallback","useEffect","useState","useAuthentication","useChatView","generateChatNameForSoloChats","getUsersOnlineCount","useSocket","ChatPreview","currentUser","activeChat","setActiveChat","chats","windowDimensions","setActiveView","setChats","socket","console","log","onlineUsers","handleClick","e","chatId","target","getAttribute","width","find","chat","_id","on","updatedChat","prevState","map","off","length","chatName","users","isGroupChat","userOnlineCount"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport {\n  generateChatNameForSoloChats,\n  getUsersOnlineCount,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\nconst ChatPreview = () => {\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const { currentUser } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions,\n    setActiveView,\n    setChats,\n  } = useChatView();\n  const { socket } = useSocket();\n\n  console.log(chats);\n\n  const { onlineUsers } = useSocket();\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name');\n\n    // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  useEffect(() => {\n    socket.on('updated chat', updatedChat => {\n      setChats(prevState => {\n        return prevState.map(chat => {\n          if (chat._id !== updatedChat._id) return chat;\n          else return updatedChat;\n        });\n      });\n    });\n    return socket.off('updated chat');\n  });\n\n  return (\n    <div className=\"chat-preview-container\" onClick={handleClick}>\n      {chats.length > 0 &&\n        chats.map(({ _id, chatName, users, isGroupChat }) => {\n          const userOnlineCount = getUsersOnlineCount(\n            onlineUsers,\n            users,\n            currentUser\n          );\n          return (\n            <div\n              key={_id}\n              name={_id}\n              className={`chat-preview-list ${\n                _id === activeChat[0]?._id ? 'active' : ''\n              }`}\n            >\n              <div className=\"chat-preview-list-item\">\n                <div className=\"chat-preview-list-item-name-and-online\">\n                  <p>\n                    {!isGroupChat\n                      ? generateChatNameForSoloChats(users, currentUser)\n                      : chatName}\n                  </p>\n                  {userOnlineCount > 0 ? (\n                    <div className=\"chat-preview-list-circle-and-count-container\">\n                      <div className=\"online-circle\" />\n                      <div>\n                        {userOnlineCount === 1 && !isGroupChat\n                          ? 'Online'\n                          : `${userOnlineCount} Online`}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"chat-preview-list-circle-and-count-container\">\n                      <div className=\"offline-circle\" />\n                      <div> {!isGroupChat ? 'Offline' : `0 Online`}</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default ChatPreview;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}