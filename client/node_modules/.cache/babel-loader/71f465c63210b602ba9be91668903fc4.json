{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { SocketProvider } from './contexts/socket-context';\nimport { ContactsProvider } from './contexts/contacts-context';\nimport { ConversationsProvider } from './contexts/conversations-context';\nimport App from './App';\nimport './index.css';\nimport { AuthenticationProvider } from './contexts/authentication-context';\nimport { SidebarProvider } from './contexts/sidebar-context';\nimport { ChatViewProvider } from './contexts/chat-view-context'; // I think I can just make a user provider that wraps the whole app, and then when they sign in, update that value that is then available to all the other components if and when they need it\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthenticationProvider, {\n      children: /*#__PURE__*/_jsxDEV(ContactsProvider, {\n        children: /*#__PURE__*/_jsxDEV(SidebarProvider, {\n          children: /*#__PURE__*/_jsxDEV(SocketProvider, {\n            children: /*#__PURE__*/_jsxDEV(ConversationsProvider, {\n              children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","BrowserRouter","SocketProvider","ContactsProvider","ConversationsProvider","App","AuthenticationProvider","SidebarProvider","ChatViewProvider","root","createRoot","document","getElementById","render"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport { SocketProvider } from './contexts/socket-context';\nimport { ContactsProvider } from './contexts/contacts-context';\nimport { ConversationsProvider } from './contexts/conversations-context';\nimport App from './App';\nimport './index.css';\nimport { AuthenticationProvider } from './contexts/authentication-context';\nimport { SidebarProvider } from './contexts/sidebar-context';\nimport { ChatViewProvider } from './contexts/chat-view-context';\n\n// I think I can just make a user provider that wraps the whole app, and then when they sign in, update that value that is then available to all the other components if and when they need it\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthenticationProvider>\n        <ContactsProvider>\n          <SidebarProvider>\n            <SocketProvider>\n              <ConversationsProvider>\n                <App />\n              </ConversationsProvider>\n            </SocketProvider>\n          </SidebarProvider>\n        </ContactsProvider>\n      </AuthenticationProvider>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,gBAAT,QAAiC,8BAAjC,C,CAEA;;;AAEA,MAAMC,IAAI,GAAGT,QAAQ,CAACU,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,aAAD;IAAA,uBACE,QAAC,sBAAD;MAAA,uBACE,QAAC,gBAAD;QAAA,uBACE,QAAC,eAAD;UAAA,uBACE,QAAC,cAAD;YAAA,uBACE,QAAC,qBAAD;cAAA,uBACE,QAAC,GAAD;gBAAA;gBAAA;gBAAA;cAAA;YADF;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF"},"metadata":{},"sourceType":"module"}