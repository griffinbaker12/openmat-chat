{"ast":null,"code":"import _defineProperty from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _toConsumableArray from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createRef,useEffect}from'react';import{useRef,useState}from'react';import{CSSTransition,TransitionGroup}from'react-transition-group';import ChatParticipant from'../chat-participant/chat-participant.component';import SearchResult from'../search-result/search-result-component';import Spinner from'../spinner/spinner.component';import{toast}from'react-toastify';import{useChatView}from'../../contexts/chat-view-context';import{useSocket}from'../../contexts/socket-context';import'./new-conversation-modal.styles.scss';import{useAuthentication}from'../../contexts/authentication-context';import{defaultToast,TOAST_TYPE}from'../../utils/utils';// There seems to also totally be room to just have one modal component, and also a genreal button component as well, but for the modal, essentially I can just pass in the name of the modal itself, and then the body of the modal. The 'children' can just be the unique part of the actual form for these components that gets inserted into the overall block of the component\n// Will also need to add something where I can check if the user exists and as the person types have a little dropdown that can fill in suggestions? May not be necessary, but I know that discord does that and you can always @someone in that way, would be a nice feature to try and implement\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NewConversationModal=function NewConversationModal(){var _useChatView=useChatView(),closeModal=_useChatView.closeModal,chats=_useChatView.chats,setChats=_useChatView.setChats,setActiveChat=_useChatView.setActiveChat;var _useAuthentication=useAuthentication(),currentUser=_useAuthentication.currentUser;var _useSocket=useSocket(),socket=_useSocket.socket;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),chatParticipants=_useState2[0],setChatParticipants=_useState2[1];var _useState3=useState({chatName:'',name:''}),_useState4=_slicedToArray(_useState3,2),formInput=_useState4[0],setFormInput=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),searchResults=_useState8[0],setSearchResults=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),showSearchResults=_useState10[0],setShowSearchResults=_useState10[1];var searchResultRef=useRef(null);var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),showChatParticipants=_useState12[0],setShowChatParticipants=_useState12[1];// The other approach would be to somehow create an array of refs and that makes sense why the ref would disappear after you delete the element but it works when it actually loads on the page\nvar chatParticipantRef=useRef(null);// So keep track of all the participants here, will need to search as well, then when we make the chat we send this to the api and push this into the current chat state of our application, also need to check to see if a chat with these users has already been made...\n// This is fine for now, I guess at some point I need to make it clear whether or not you can submit this when you hit enter, or whether hitting enter adds people to the chat if there are none, but then it probably should stary like that as well even afterwards so may make the other button a button type as well\nvar resetForm=function resetForm(){setShowChatParticipants(false);setShowSearchResults(false);setChatParticipants([]);setSearchResults([]);setFormInput({chatName:'',name:''});};var handleClick=function handleClick(){return resetForm();};useEffect(function(){document.addEventListener('click',handleClick);return function(){return document.removeEventListener('click',handleClick);};});var handleChatCreation=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var mappedChatWithNames,sortedChatParticipants,exists,chatName,chatParticipantIds,payload,response,newChat;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();// May want some sort of notification just letting them know that they need to enter something into the chat name field\nif(!(chatParticipants.length===0)){_context.next=4;break;}toast.error('Please add users to chat',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});return _context.abrupt(\"return\");case 4:if(!(!formInput.chatName&&chatParticipants.length!==1)){_context.next=7;break;}toast.error('Please add name for group chat',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});return _context.abrupt(\"return\");case 7:// console.log(chats, 'chats');\n// I need to get the ids out of everyone in the current chat\nmappedChatWithNames=chats.map(function(chat){return chat.users.map(function(_ref2){var userName=_ref2.userName;return userName;}).sort();});sortedChatParticipants=[currentUser].concat(_toConsumableArray(chatParticipants)).map(function(user){return user.userName;}).sort();exists=mappedChatWithNames.some(function(chat){if(chat.length!==sortedChatParticipants.length)return false;return chat.every(function(user,i){return user===sortedChatParticipants[i];});});if(!exists){_context.next=13;break;}toast.error('Chat between these users already exists',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});return _context.abrupt(\"return\");case 13:chatName=chatParticipants.length===1?'null':formInput.chatName;chatParticipantIds=chatParticipants.map(function(_ref3){var _id=_ref3._id;return _id;});payload={chatName:chatName,users:chatParticipantIds};_context.prev=16;_context.next=19;return fetch(\"http://localhost:4000/api/chat/createChat\",{method:'post',headers:{Authorization:\"Bearer \".concat(currentUser.token),'Content-Type':'application/json'},body:JSON.stringify(payload)});case 19:response=_context.sent;_context.next=22;return response.json();case 22:newChat=_context.sent;setActiveChat([newChat]);setChats(function(prevState){return[newChat].concat(_toConsumableArray(prevState));});socket.emit('new chat',newChat,currentUser);resetForm();closeModal();toast.success('Chat creation successful',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});_context.next=34;break;case 31:_context.prev=31;_context.t0=_context[\"catch\"](16);toast.error('Error creating chat, please try again',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});case 34:case\"end\":return _context.stop();}}},_callee,null,[[16,31]]);}));return function handleChatCreation(_x){return _ref.apply(this,arguments);};}();var handleChange=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e){var field,query,response,_yield$response$json,users,filteredUsers;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:field=e.target.getAttribute('name');query=e.target.value;setFormInput(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},field,query));});// If we are typing into the name field, then we want to make a fetch reqeust with the current value of the input\nif(!(field!=='name')){_context2.next=5;break;}return _context2.abrupt(\"return\");case 5:if(query){_context2.next=9;break;}setShowSearchResults(false);setSearchResults([]);return _context2.abrupt(\"return\");case 9:_context2.prev=9;setIsLoading(true);_context2.next=13;return fetch(\"http://localhost:4000/api/user?search=\".concat(query),{method:'get',headers:{Authorization:\"Bearer \".concat(currentUser.token)}});case 13:response=_context2.sent;_context2.next=16;return response.json();case 16:_yield$response$json=_context2.sent;users=_yield$response$json.users;if(users.length){_context2.next=22;break;}setShowSearchResults(false);setIsLoading(false);return _context2.abrupt(\"return\");case 22:filteredUsers=users.filter(function(user){return!chatParticipants.some(function(participant){return user._id===participant._id;});});if(filteredUsers.length){_context2.next=28;break;}setShowSearchResults(false);setIsLoading(false);setSearchResults(filteredUsers);return _context2.abrupt(\"return\");case 28:setIsLoading(false);setShowSearchResults(true);setSearchResults(filteredUsers);_context2.next=36;break;case 33:_context2.prev=33;_context2.t0=_context2[\"catch\"](9);toast.error('Error fetching search results',{position:'bottom-center',autoClose:3000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,theme:'dark'});case 36:case\"end\":return _context2.stop();}}},_callee2,null,[[9,33]]);}));return function handleChange(_x2){return _ref4.apply(this,arguments);};}();var handleAddUser=function handleAddUser(e){var closestContainer=e.target.closest('.search-result-container');var selectedId=closestContainer.getAttribute('name');var alreadyExists=chatParticipants.some(function(participant){return participant._id===selectedId;});if(alreadyExists){defaultToast(TOAST_TYPE.failure,'Cannot add duplicate user');return;}if(searchResults.length===1){setShowSearchResults(false);}var selectedUser=searchResults.find(function(result){return(result===null||result===void 0?void 0:result._id)===selectedId;});var filteredUsers=searchResults.filter(function(result){return selectedUser._id!==result._id;});setChatParticipants(function(prevState){return[].concat(_toConsumableArray(prevState),[selectedUser]);});setShowChatParticipants(true);setSearchResults(filteredUsers);};var handleRemoveUser=function handleRemoveUser(e){var selectedId=e.target.getAttribute('name');var removedUser=chatParticipants.find(function(participant){return participant._id===selectedId;});var newParticipants=chatParticipants.filter(function(participant){return participant._id!==selectedId;});if(newParticipants.length===0)setShowChatParticipants(false);setChatParticipants(newParticipants);setSearchResults(function(prevState){return[].concat(_toConsumableArray(prevState),[removedUser]);});};return/*#__PURE__*/_jsx(\"div\",{className:\"new-conversation-modal-body\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleChatCreation,children:[/*#__PURE__*/_jsx(\"label\",{style:chatParticipants.length<=1?{display:'none'}:{},children:\"Chat Name\"}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Enter chat name...\",onChange:handleChange,type:\"text\",name:\"chatName\",value:formInput.chatName,style:chatParticipants.length<=1?{display:'none'}:{}}),/*#__PURE__*/_jsx(\"label\",{children:\"User\"}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Search users...\",onChange:handleChange,type:\"text\",name:\"name\",value:formInput.name}),/*#__PURE__*/_jsx(CSSTransition,{in:showChatParticipants,classNames:\"chat-participants\",timeout:500,nodeRef:chatParticipantRef,mountOnEnter:true,unmountOnExit:true,children:/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},ref:chatParticipantRef,children:/*#__PURE__*/_jsx(TransitionGroup,{className:\"new-conversation-modal-chat-participant-container\",children:chatParticipants.map(function(chatParticipant){var participantRef=/*#__PURE__*/createRef();return/*#__PURE__*/_jsx(CSSTransition,{classNames:\"chat-participant\",timeout:500,nodeRef:participantRef,children:/*#__PURE__*/_jsx(\"div\",{ref:participantRef,children:/*#__PURE__*/_jsx(ChatParticipant,{chatParticipant:chatParticipant,handleRemoveUser:handleRemoveUser})})},chatParticipant._id);})})})}),isLoading?/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',paddingTop:'4px',paddingBottom:'8px'},children:/*#__PURE__*/_jsx(Spinner,{})}):/*#__PURE__*/_jsx(CSSTransition,{in:showSearchResults,classNames:\"search-results\",timeout:500,nodeRef:searchResultRef,mountOnEnter:true,unmountOnExit:true,children:/*#__PURE__*/_jsx(\"div\",{ref:searchResultRef,children:/*#__PURE__*/_jsx(TransitionGroup,{className:\"new-conversation-modal-chat-search-result-container\",timeout:500,children:searchResults.map(function(searchResult){var resultRef=/*#__PURE__*/createRef();return/*#__PURE__*/_jsx(CSSTransition,{classNames:\"search-result\",timeout:500,nodeRef:resultRef,children:/*#__PURE__*/_jsx(\"div\",{ref:resultRef,children:/*#__PURE__*/_jsx(SearchResult,{handleAddUser:handleAddUser,searchResult:searchResult})})},searchResult._id);})})})}),/*#__PURE__*/_jsx(\"div\",{className:\"new-conversation-modal-buttons\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"\".concat(searchResults.length===0?'button-no-search-results':''),children:\"Create Chat\"})})]})});};export default NewConversationModal;","map":{"version":3,"names":["React","createRef","useEffect","useRef","useState","CSSTransition","TransitionGroup","ChatParticipant","SearchResult","Spinner","toast","useChatView","useSocket","useAuthentication","defaultToast","TOAST_TYPE","NewConversationModal","closeModal","chats","setChats","setActiveChat","currentUser","socket","chatParticipants","setChatParticipants","chatName","name","formInput","setFormInput","isLoading","setIsLoading","searchResults","setSearchResults","showSearchResults","setShowSearchResults","searchResultRef","showChatParticipants","setShowChatParticipants","chatParticipantRef","resetForm","handleClick","document","addEventListener","removeEventListener","handleChatCreation","e","preventDefault","length","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","mappedChatWithNames","map","chat","users","userName","sort","sortedChatParticipants","user","exists","some","every","i","chatParticipantIds","_id","payload","fetch","method","headers","Authorization","token","body","JSON","stringify","response","json","newChat","prevState","emit","success","handleChange","field","target","getAttribute","query","value","filteredUsers","filter","participant","handleAddUser","closestContainer","closest","selectedId","alreadyExists","failure","selectedUser","find","result","handleRemoveUser","removedUser","newParticipants","display","justifyContent","chatParticipant","participantRef","paddingTop","paddingBottom","searchResult","resultRef"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/new-conversation-modal/new-conversation-modal.component.jsx"],"sourcesContent":["import React, { createRef, useEffect } from 'react';\nimport { useRef, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ChatParticipant from '../chat-participant/chat-participant.component';\nimport SearchResult from '../search-result/search-result-component';\nimport Spinner from '../spinner/spinner.component';\nimport { toast } from 'react-toastify';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport './new-conversation-modal.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { defaultToast, TOAST_TYPE } from '../../utils/utils';\n\n// There seems to also totally be room to just have one modal component, and also a genreal button component as well, but for the modal, essentially I can just pass in the name of the modal itself, and then the body of the modal. The 'children' can just be the unique part of the actual form for these components that gets inserted into the overall block of the component\n\n// Will also need to add something where I can check if the user exists and as the person types have a little dropdown that can fill in suggestions? May not be necessary, but I know that discord does that and you can always @someone in that way, would be a nice feature to try and implement\n\nconst NewConversationModal = () => {\n  const { closeModal, chats, setChats, setActiveChat } = useChatView();\n  const { currentUser } = useAuthentication();\n  const { socket } = useSocket();\n\n  const [chatParticipants, setChatParticipants] = useState([]);\n  const [formInput, setFormInput] = useState({ chatName: '', name: '' });\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const searchResultRef = useRef(null);\n\n  const [showChatParticipants, setShowChatParticipants] = useState(false);\n  // The other approach would be to somehow create an array of refs and that makes sense why the ref would disappear after you delete the element but it works when it actually loads on the page\n  const chatParticipantRef = useRef(null);\n\n  // So keep track of all the participants here, will need to search as well, then when we make the chat we send this to the api and push this into the current chat state of our application, also need to check to see if a chat with these users has already been made...\n\n  // This is fine for now, I guess at some point I need to make it clear whether or not you can submit this when you hit enter, or whether hitting enter adds people to the chat if there are none, but then it probably should stary like that as well even afterwards so may make the other button a button type as well\n\n  const resetForm = () => {\n    setShowChatParticipants(false);\n    setShowSearchResults(false);\n    setChatParticipants([]);\n    setSearchResults([]);\n    setFormInput({ chatName: '', name: '' });\n  };\n\n  const handleClick = () => resetForm();\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => document.removeEventListener('click', handleClick);\n  });\n\n  const handleChatCreation = async e => {\n    e.preventDefault();\n\n    // May want some sort of notification just letting them know that they need to enter something into the chat name field\n\n    if (chatParticipants.length === 0) {\n      toast.error('Please add users to chat', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n      return;\n    }\n\n    if (!formInput.chatName && chatParticipants.length !== 1) {\n      toast.error('Please add name for group chat', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n      return;\n    }\n\n    // console.log(chats, 'chats');\n\n    // I need to get the ids out of everyone in the current chat\n    const mappedChatWithNames = chats.map(chat =>\n      chat.users.map(({ userName }) => userName).sort()\n    );\n\n    const sortedChatParticipants = [currentUser, ...chatParticipants]\n      .map(user => user.userName)\n      .sort();\n\n    const exists = mappedChatWithNames.some(chat => {\n      if (chat.length !== sortedChatParticipants.length) return false;\n      return chat.every((user, i) => user === sortedChatParticipants[i]);\n    });\n\n    if (exists) {\n      toast.error('Chat between these users already exists', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n      return;\n    }\n\n    const chatName =\n      chatParticipants.length === 1 ? 'null' : formInput.chatName;\n\n    const chatParticipantIds = chatParticipants.map(({ _id }) => _id);\n    const payload = {\n      chatName: chatName,\n      users: chatParticipantIds,\n    };\n\n    try {\n      const response = await fetch(\n        `http://localhost:4000/api/chat/createChat`,\n        {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        }\n      );\n      const newChat = await response.json();\n      setActiveChat([newChat]);\n      setChats(prevState => [newChat, ...prevState]);\n      socket.emit('new chat', newChat, currentUser);\n      resetForm();\n      closeModal();\n      toast.success('Chat creation successful', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n    } catch (e) {\n      toast.error('Error creating chat, please try again', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n    }\n    // createConversation(chatParticipants);\n    // closeModal();\n    // setFormInput({ chatName: '', name: '' });\n    // setChatParticipants([]);\n  };\n\n  const handleChange = async e => {\n    const field = e.target.getAttribute('name');\n    const query = e.target.value;\n    setFormInput(prevState => ({ ...prevState, [field]: query }));\n\n    // If we are typing into the name field, then we want to make a fetch reqeust with the current value of the input\n    if (field !== 'name') return;\n\n    if (!query) {\n      setShowSearchResults(false);\n      setSearchResults([]);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await fetch(\n        `http://localhost:4000/api/user?search=${query}`,\n        {\n          method: 'get',\n          headers: { Authorization: `Bearer ${currentUser.token}` },\n        }\n      );\n      const { users } = await response.json();\n      if (!users.length) {\n        setShowSearchResults(false);\n        setIsLoading(false);\n        return;\n      }\n      const filteredUsers = users.filter(\n        user =>\n          !chatParticipants.some(participant => user._id === participant._id)\n      );\n      if (!filteredUsers.length) {\n        setShowSearchResults(false);\n        setIsLoading(false);\n        setSearchResults(filteredUsers);\n        return;\n      }\n      setIsLoading(false);\n      setShowSearchResults(true);\n      setSearchResults(filteredUsers);\n    } catch (e) {\n      toast.error('Error fetching search results', {\n        position: 'bottom-center',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: 'dark',\n      });\n    }\n  };\n\n  const handleAddUser = e => {\n    const closestContainer = e.target.closest('.search-result-container');\n    const selectedId = closestContainer.getAttribute('name');\n    const alreadyExists = chatParticipants.some(\n      participant => participant._id === selectedId\n    );\n\n    if (alreadyExists) {\n      defaultToast(TOAST_TYPE.failure, 'Cannot add duplicate user');\n      return;\n    }\n\n    if (searchResults.length === 1) {\n      setShowSearchResults(false);\n    }\n\n    const selectedUser = searchResults.find(\n      result => result?._id === selectedId\n    );\n\n    const filteredUsers = searchResults.filter(\n      result => selectedUser._id !== result._id\n    );\n\n    setChatParticipants(prevState => [...prevState, selectedUser]);\n    setShowChatParticipants(true);\n    setSearchResults(filteredUsers);\n  };\n\n  const handleRemoveUser = e => {\n    const selectedId = e.target.getAttribute('name');\n    const removedUser = chatParticipants.find(\n      participant => participant._id === selectedId\n    );\n    const newParticipants = chatParticipants.filter(\n      participant => participant._id !== selectedId\n    );\n    if (newParticipants.length === 0) setShowChatParticipants(false);\n    setChatParticipants(newParticipants);\n    setSearchResults(prevState => [...prevState, removedUser]);\n  };\n\n  return (\n    <div className=\"new-conversation-modal-body\">\n      <form onSubmit={handleChatCreation}>\n        <label style={chatParticipants.length <= 1 ? { display: 'none' } : {}}>\n          Chat Name\n        </label>\n        <input\n          placeholder=\"Enter chat name...\"\n          onChange={handleChange}\n          type=\"text\"\n          name=\"chatName\"\n          value={formInput.chatName}\n          style={chatParticipants.length <= 1 ? { display: 'none' } : {}}\n        />\n        <label>User</label>\n        <input\n          placeholder=\"Search users...\"\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={formInput.name}\n        />\n\n        <CSSTransition\n          in={showChatParticipants}\n          classNames=\"chat-participants\"\n          timeout={500}\n          nodeRef={chatParticipantRef}\n          mountOnEnter\n          unmountOnExit\n        >\n          <div\n            style={{ display: 'flex', justifyContent: 'center' }}\n            ref={chatParticipantRef}\n          >\n            <TransitionGroup className=\"new-conversation-modal-chat-participant-container\">\n              {chatParticipants.map(chatParticipant => {\n                const participantRef = createRef();\n                return (\n                  <CSSTransition\n                    key={chatParticipant._id}\n                    classNames=\"chat-participant\"\n                    timeout={500}\n                    nodeRef={participantRef}\n                  >\n                    <div ref={participantRef}>\n                      <ChatParticipant\n                        chatParticipant={chatParticipant}\n                        handleRemoveUser={handleRemoveUser}\n                      />\n                    </div>\n                  </CSSTransition>\n                );\n              })}\n            </TransitionGroup>\n          </div>\n        </CSSTransition>\n\n        {isLoading ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              paddingTop: '4px',\n              paddingBottom: '8px',\n            }}\n          >\n            <Spinner />\n          </div>\n        ) : (\n          <CSSTransition\n            in={showSearchResults}\n            classNames=\"search-results\"\n            timeout={500}\n            nodeRef={searchResultRef}\n            mountOnEnter\n            unmountOnExit\n          >\n            <div ref={searchResultRef}>\n              <TransitionGroup\n                className=\"new-conversation-modal-chat-search-result-container\"\n                timeout={500}\n              >\n                {searchResults.map(searchResult => {\n                  const resultRef = createRef();\n                  return (\n                    <CSSTransition\n                      key={searchResult._id}\n                      classNames=\"search-result\"\n                      timeout={500}\n                      nodeRef={resultRef}\n                    >\n                      <div ref={resultRef}>\n                        <SearchResult\n                          handleAddUser={handleAddUser}\n                          searchResult={searchResult}\n                        />\n                      </div>\n                    </CSSTransition>\n                  );\n                })}\n              </TransitionGroup>\n            </div>\n          </CSSTransition>\n        )}\n\n        <div className=\"new-conversation-modal-buttons\">\n          <button\n            type=\"submit\"\n            className={`${\n              searchResults.length === 0 ? 'button-no-search-results' : ''\n            }`}\n          >\n            Create Chat\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default NewConversationModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}