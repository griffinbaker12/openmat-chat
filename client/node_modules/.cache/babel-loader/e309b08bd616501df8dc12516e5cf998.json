{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport { generateChatNameForSoloChats, getUsersOnlineCount } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatPreview = () => {\n  _s();\n\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions,\n    setActiveView\n  } = useChatView();\n  const [onlineUserCount, setOnlineUserCount] = useState(0);\n  const {\n    onlineUsers\n  } = useSocket();\n  useEffect(() => {\n    setOnlineUserCount(getUsersOnlineCount(onlineUsers, currentUser));\n  }, [onlineUsers]);\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name'); // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-preview-container\",\n    onClick: handleClick,\n    children: chats.length > 0 && chats.map(_ref => {\n      var _activeChat$;\n\n      let {\n        _id,\n        chatName,\n        users,\n        isGroupChat\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        name: _id,\n        className: `chat-preview-list ${_id === ((_activeChat$ = activeChat[0]) === null || _activeChat$ === void 0 ? void 0 : _activeChat$._id) ? 'active' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-preview-list-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: !isGroupChat ? generateChatNameForSoloChats(users, currentUser) : chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [' ', onlineUserCount > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"online-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"online-user-count\",\n                children: [onlineUserCount === 1 ? '' : onlineUserCount, \" online\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : '', ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatPreview, \"7L+AcHRYMx7d9a3DaPj8y/tthM0=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = ChatPreview;\nexport default ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"names":["useCallback","useEffect","useState","useAuthentication","useChatView","generateChatNameForSoloChats","getUsersOnlineCount","useSocket","ChatPreview","currentUser","activeChat","setActiveChat","chats","windowDimensions","setActiveView","onlineUserCount","setOnlineUserCount","onlineUsers","handleClick","e","chatId","target","getAttribute","width","find","chat","_id","length","map","chatName","users","isGroupChat"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport {\n  generateChatNameForSoloChats,\n  getUsersOnlineCount,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\nconst ChatPreview = () => {\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const { currentUser } = useAuthentication();\n  const { activeChat, setActiveChat, chats, windowDimensions, setActiveView } =\n    useChatView();\n\n  const [onlineUserCount, setOnlineUserCount] = useState(0);\n\n  const { onlineUsers } = useSocket();\n\n  useEffect(() => {\n    setOnlineUserCount(getUsersOnlineCount(onlineUsers, currentUser));\n  }, [onlineUsers]);\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name');\n\n    // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return (\n    <div className=\"chat-preview-container\" onClick={handleClick}>\n      {chats.length > 0 &&\n        chats.map(({ _id, chatName, users, isGroupChat }) => (\n          <div\n            key={_id}\n            name={_id}\n            className={`chat-preview-list ${\n              _id === activeChat[0]?._id ? 'active' : ''\n            }`}\n          >\n            <div className=\"chat-preview-list-item\">\n              <p>\n                {!isGroupChat\n                  ? generateChatNameForSoloChats(users, currentUser)\n                  : chatName}\n              </p>\n              <div>\n                {' '}\n                {onlineUserCount > 0 ? (\n                  <>\n                    <div className=\"online-circle\" />\n                    <div className=\"online-user-count\">\n                      {onlineUserCount === 1 ? '' : onlineUserCount} online\n                    </div>\n                  </>\n                ) : (\n                  ''\n                )}{' '}\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ChatPreview;\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAO,4BAAP;AACA,SACEC,4BADF,EAEEC,mBAFF,QAGO,mBAHP;AAIA,SAASC,SAAT,QAA0B,+BAA1B;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EACA,MAAM;IAAEC;EAAF,IAAkBN,iBAAiB,EAAzC;EACA,MAAM;IAAEO,UAAF;IAAcC,aAAd;IAA6BC,KAA7B;IAAoCC,gBAApC;IAAsDC;EAAtD,IACJV,WAAW,EADb;EAGA,MAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,CAAD,CAAtD;EAEA,MAAM;IAAEe;EAAF,IAAkBV,SAAS,EAAjC;EAEAN,SAAS,CAAC,MAAM;IACde,kBAAkB,CAACV,mBAAmB,CAACW,WAAD,EAAcR,WAAd,CAApB,CAAlB;EACD,CAFQ,EAEN,CAACQ,WAAD,CAFM,CAAT;;EAIA,MAAMC,WAAW,GAAGC,CAAC,IAAI;IACvB,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAf,CADuB,CAGvB;;IACA,IAAI,CAACF,MAAL,EAAa;;IAEb,IAAIP,gBAAgB,CAACU,KAAjB,IAA0B,GAA9B,EAAmC;MACjCT,aAAa,CAAC,MAAD,CAAb;IACD;;IAED,MAAMJ,UAAU,GAAGE,KAAK,CAACY,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,MAAhC,CAAnB;IACAT,aAAa,CAAC,CAACD,UAAD,CAAD,CAAb;EACD,CAZD;;EAcA,oBACE;IAAK,SAAS,EAAC,wBAAf;IAAwC,OAAO,EAAEQ,WAAjD;IAAA,UACGN,KAAK,CAACe,MAAN,GAAe,CAAf,IACCf,KAAK,CAACgB,GAAN,CAAU;MAAA;;MAAA,IAAC;QAAEF,GAAF;QAAOG,QAAP;QAAiBC,KAAjB;QAAwBC;MAAxB,CAAD;MAAA,oBACR;QAEE,IAAI,EAAEL,GAFR;QAGE,SAAS,EAAG,qBACVA,GAAG,sBAAKhB,UAAU,CAAC,CAAD,CAAf,iDAAK,aAAegB,GAApB,CAAH,GAA6B,QAA7B,GAAwC,EACzC,EALH;QAAA,uBAOE;UAAK,SAAS,EAAC,wBAAf;UAAA,wBACE;YAAA,UACG,CAACK,WAAD,GACG1B,4BAA4B,CAACyB,KAAD,EAAQrB,WAAR,CAD/B,GAEGoB;UAHN;YAAA;YAAA;YAAA;UAAA,QADF,eAME;YAAA,WACG,GADH,EAEGd,eAAe,GAAG,CAAlB,gBACC;cAAA,wBACE;gBAAK,SAAS,EAAC;cAAf;gBAAA;gBAAA;gBAAA;cAAA,QADF,eAEE;gBAAK,SAAS,EAAC,mBAAf;gBAAA,WACGA,eAAe,KAAK,CAApB,GAAwB,EAAxB,GAA6BA,eADhC;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAFF;YAAA,gBADD,GAQC,EAVJ,EAWK,GAXL;UAAA;YAAA;YAAA;YAAA;UAAA,QANF;QAAA;UAAA;UAAA;UAAA;QAAA;MAPF,GACOW,GADP;QAAA;QAAA;QAAA;MAAA,QADQ;IAAA,CAAV;EAFJ;IAAA;IAAA;IAAA;EAAA,QADF;AAmCD,CA/DD;;GAAMlB,W;UAEoBL,iB,EAEtBC,W,EAIsBG,S;;;KARpBC,W;AAiEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}