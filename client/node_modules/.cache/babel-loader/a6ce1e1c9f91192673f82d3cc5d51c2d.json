{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport { generateChatNameForSoloChats, getUsersOnlineCount } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatPreview = () => {\n  _s();\n\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions,\n    setActiveView\n  } = useChatView();\n  const [onlineUserCountForActiveChat, setOnlineUserCountForActiveChat] = useState(0);\n  const {\n    onlineUsers\n  } = useSocket();\n  useEffect(() => {\n    if (!activeChat[0]) return;\n    setOnlineUserCountForActiveChat(getUsersOnlineCount(onlineUsers, activeChat[0].users, currentUser));\n  }, [onlineUsers, currentUser, activeChat]);\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name'); // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-preview-container\",\n    onClick: handleClick,\n    children: chats.length > 0 && chats.map(_ref => {\n      var _activeChat$;\n\n      let {\n        _id,\n        chatName,\n        users,\n        isGroupChat\n      } = _ref;\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        name: _id,\n        className: `chat-preview-list ${_id === ((_activeChat$ = activeChat[0]) === null || _activeChat$ === void 0 ? void 0 : _activeChat$._id) ? 'active' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-preview-list-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-preview-list-item-name-and-online\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: !isGroupChat ? generateChatNameForSoloChats(users, currentUser) : chatName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), onlineUserCountForActiveChat > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-preview-list-circle-and-count-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"online-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"online-user-count\",\n                children: [getUsersOnlineCount(onlineUsers, activeChat[0].users, currentUser) === 1 ? '' : onlineUserCountForActiveChat, \"Online\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"offline-circle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this)\n            }, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatPreview, \"uaYq8jPiYyqnKeBnrnjhMewaCU0=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = ChatPreview;\nexport default ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"names":["useCallback","useEffect","useState","useAuthentication","useChatView","generateChatNameForSoloChats","getUsersOnlineCount","useSocket","ChatPreview","currentUser","activeChat","setActiveChat","chats","windowDimensions","setActiveView","onlineUserCountForActiveChat","setOnlineUserCountForActiveChat","onlineUsers","users","handleClick","e","chatId","target","getAttribute","width","find","chat","_id","length","map","chatName","isGroupChat"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-preview/chat-preview.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport './chat-preview.styles.scss';\nimport {\n  generateChatNameForSoloChats,\n  getUsersOnlineCount,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\nconst ChatPreview = () => {\n  // And then we can also pull the active conversation up into higher state or into a context just so that we can actually store this variable without losing it when we switch between categories b/c that triggers a re-render\n  const { currentUser } = useAuthentication();\n  const { activeChat, setActiveChat, chats, windowDimensions, setActiveView } =\n    useChatView();\n\n  const [onlineUserCountForActiveChat, setOnlineUserCountForActiveChat] =\n    useState(0);\n\n  const { onlineUsers } = useSocket();\n\n  useEffect(() => {\n    if (!activeChat[0]) return;\n    setOnlineUserCountForActiveChat(\n      getUsersOnlineCount(onlineUsers, activeChat[0].users, currentUser)\n    );\n  }, [onlineUsers, currentUser, activeChat]);\n\n  const handleClick = e => {\n    const chatId = e.target.getAttribute('name');\n\n    // Clicked on the container and not one of the list items, did not want to add the event handler to each individual item\n    if (!chatId) return;\n\n    if (windowDimensions.width <= 900) {\n      setActiveView('chat');\n    }\n\n    const activeChat = chats.find(chat => chat._id === chatId);\n    setActiveChat([activeChat]);\n  };\n\n  return (\n    <div className=\"chat-preview-container\" onClick={handleClick}>\n      {chats.length > 0 &&\n        chats.map(({ _id, chatName, users, isGroupChat }) => {\n          <div\n            key={_id}\n            name={_id}\n            className={`chat-preview-list ${\n              _id === activeChat[0]?._id ? 'active' : ''\n            }`}\n          >\n            <div className=\"chat-preview-list-item\">\n              <div className=\"chat-preview-list-item-name-and-online\">\n                <p>\n                  {!isGroupChat\n                    ? generateChatNameForSoloChats(users, currentUser)\n                    : chatName}\n                </p>\n                {onlineUserCountForActiveChat > 0 ? (\n                  <div className=\"chat-preview-list-circle-and-count-container\">\n                    <div className=\"online-circle\" />\n                    <div className=\"online-user-count\">\n                      {getUsersOnlineCount(\n                        onlineUsers,\n                        activeChat[0].users,\n                        currentUser\n                      ) === 1\n                        ? ''\n                        : onlineUserCountForActiveChat}\n                      Online\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"offline-circle\" />\n                  </>\n                )}\n              </div>\n            </div>\n          </div>;\n        })}\n    </div>\n  );\n};\n\nexport default ChatPreview;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}