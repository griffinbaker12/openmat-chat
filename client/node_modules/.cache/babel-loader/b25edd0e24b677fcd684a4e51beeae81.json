{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useConversations } from '../../contexts/conversations-context';\nimport './message-view.styles.scss'; // Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MessageView = () => {\n  _s();\n\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  // const mostRecentMessage = useRef();\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, []);\n  const {\n    activeChat\n  } = useConversations(); // What is the best way to make it so that the text bubble can expland if it needs to??\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-view-container\",\n    children: [\"const lastMessageBool = activeChat.messages.length - 1 === i + 1; return (\", /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lastMessageBool ? setRef : null,\n      className: `message-view-text-container ${message.userSent ? 'user-sent' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-view-text\",\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-view-text-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.userSent ? 'You' : message.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.timeStamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), \"); })}\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageView, \"KL/8G09OEJJjoN9Ww0+ycfo9OyA=\", false, function () {\n  return [useConversations];\n});\n\n_c = MessageView;\nexport default MessageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageView\");","map":{"version":3,"names":["useCallback","useConversations","MessageView","setRef","node","scrollIntoView","smooth","activeChat","lastMessageBool","message","userSent","text","sender","timeStamp","i"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { useConversations } from '../../contexts/conversations-context';\nimport './message-view.styles.scss';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nconst MessageView = () => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  // const mostRecentMessage = useRef();\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n  const { activeChat } = useConversations();\n\n  // What is the best way to make it so that the text bubble can expland if it needs to??\n  return (\n    <div className=\"message-view-container\">\n      {/* {activeChat.messages.map((message, i) => { */}\n      const lastMessageBool = activeChat.messages.length - 1 === i + 1; return (\n      <div\n        key={i}\n        ref={lastMessageBool ? setRef : null}\n        className={`message-view-text-container ${\n          message.userSent ? 'user-sent' : ''\n        }`}\n      >\n        <div className=\"message-view-text\">{message.text}</div>\n        <div className=\"message-view-text-info\">\n          <p>{message.userSent ? 'You' : message.sender}</p>\n          <span>&#x2022;</span>\n          <p>{message.timeStamp}</p>\n        </div>\n      </div>\n      ); })}\n    </div>\n  );\n};\n\nexport default MessageView;\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,OAAO,4BAAP,C,CAEA;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EACA;EACA,MAAMC,MAAM,GAAGH,WAAW,CAACI,IAAI,IAAI;IACjC,IAAIA,IAAJ,EAAU;MACRA,IAAI,CAACC,cAAL,CAAoB;QAAEC,MAAM,EAAE;MAAV,CAApB;IACD;EACF,CAJyB,EAIvB,EAJuB,CAA1B;EAKA,MAAM;IAAEC;EAAF,IAAiBN,gBAAgB,EAAvC,CARwB,CAUxB;;EACA,oBACE;IAAK,SAAS,EAAC,wBAAf;IAAA,sGAGE;MAEE,GAAG,EAAEO,eAAe,GAAGL,MAAH,GAAY,IAFlC;MAGE,SAAS,EAAG,+BACVM,OAAO,CAACC,QAAR,GAAmB,WAAnB,GAAiC,EAClC,EALH;MAAA,wBAOE;QAAK,SAAS,EAAC,mBAAf;QAAA,UAAoCD,OAAO,CAACE;MAA5C;QAAA;QAAA;QAAA;MAAA,QAPF,eAQE;QAAK,SAAS,EAAC,wBAAf;QAAA,wBACE;UAAA,UAAIF,OAAO,CAACC,QAAR,GAAmB,KAAnB,GAA2BD,OAAO,CAACG;QAAvC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA,UAAIH,OAAO,CAACI;QAAZ;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QARF;IAAA,GACOC,CADP;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAhCD;;GAAMZ,W;UAQmBD,gB;;;KARnBC,W;AAkCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}