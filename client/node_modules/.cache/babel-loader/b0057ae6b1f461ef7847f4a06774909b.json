{"ast":null,"code":"import { toast } from 'react-toastify';\nexport const generateChatNameForSoloChats = (users, currentUser) => {\n  // console.log(\n  //   'the users and current user from function are',\n  //   users,\n  //   currentUser\n  // );\n  return users.filter(user => user._id !== currentUser._id)[0].name;\n};\nexport const TOAST_TYPE = {\n  success: 'success',\n  error: 'error'\n};\nexport const defaultToast = (type, message) => {\n  if (type === TOAST_TYPE.success) {\n    toast.success(message, {\n      position: 'bottom-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'dark'\n    });\n  } else {\n    toast.error(message, {\n      position: 'bottom-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'dark'\n    });\n  }\n};\nexport const getMutualFriends = (friendOneArr, friendTwoArr) => {\n  let count = 0;\n  friendOneArr.forEach(friendOne => {\n    friendTwoArr.forEach(friendTwo => {\n      if (friendOne.userName === friendTwo.userName) {\n        count++;\n      }\n    });\n  });\n  return count;\n};\nexport const areFriends = (user1, user2) => {\n  return user1.friends.some(friend => friend.userName === user2.userName);\n};\nexport const userSent = (currentUser, message) => currentUser._id === message.sender._id;\nexport const sameSenderAndNotCurrentUser = (i, messages, currentUser) => {\n  console.log(messages[i]);\n  return i + 1 < messages.length && messages[i].sender._id === messages[i + 1].sender._id && currentUser._id !== messages[i].sender._id;\n};","map":{"version":3,"names":["toast","generateChatNameForSoloChats","users","currentUser","filter","user","_id","name","TOAST_TYPE","success","error","defaultToast","type","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","getMutualFriends","friendOneArr","friendTwoArr","count","forEach","friendOne","friendTwo","userName","areFriends","user1","user2","friends","some","friend","userSent","sender","sameSenderAndNotCurrentUser","i","messages","console","log","length"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/utils/utils.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nexport const generateChatNameForSoloChats = (users, currentUser) => {\n  // console.log(\n  //   'the users and current user from function are',\n  //   users,\n  //   currentUser\n  // );\n  return users.filter(user => user._id !== currentUser._id)[0].name;\n};\n\nexport const TOAST_TYPE = {\n  success: 'success',\n  error: 'error',\n};\n\nexport const defaultToast = (type, message) => {\n  if (type === TOAST_TYPE.success) {\n    toast.success(message, {\n      position: 'bottom-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'dark',\n    });\n  } else {\n    toast.error(message, {\n      position: 'bottom-center',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'dark',\n    });\n  }\n};\n\nexport const getMutualFriends = (friendOneArr, friendTwoArr) => {\n  let count = 0;\n  friendOneArr.forEach(friendOne => {\n    friendTwoArr.forEach(friendTwo => {\n      if (friendOne.userName === friendTwo.userName) {\n        count++;\n      }\n    });\n  });\n  return count;\n};\n\nexport const areFriends = (user1, user2) => {\n  return user1.friends.some(friend => friend.userName === user2.userName);\n};\n\nexport const userSent = (currentUser, message) =>\n  currentUser._id === message.sender._id;\n\nexport const sameSenderAndNotCurrentUser = (i, messages, currentUser) => {\n  console.log(messages[i]);\n  return (\n    i + 1 < messages.length &&\n    messages[i].sender._id === messages[i + 1].sender._id &&\n    currentUser._id !== messages[i].sender._id\n  );\n};\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,4BAA4B,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;EAClE;EACA;EACA;EACA;EACA;EACA,OAAOD,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaH,WAAW,CAACG,GAA9C,EAAmD,CAAnD,EAAsDC,IAA7D;AACD,CAPM;AASP,OAAO,MAAMC,UAAU,GAAG;EACxBC,OAAO,EAAE,SADe;EAExBC,KAAK,EAAE;AAFiB,CAAnB;AAKP,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;EAC7C,IAAID,IAAI,KAAKJ,UAAU,CAACC,OAAxB,EAAiC;IAC/BT,KAAK,CAACS,OAAN,CAAcI,OAAd,EAAuB;MACrBC,QAAQ,EAAE,eADW;MAErBC,SAAS,EAAE,IAFU;MAGrBC,eAAe,EAAE,KAHI;MAIrBC,YAAY,EAAE,IAJO;MAKrBC,YAAY,EAAE,IALO;MAMrBC,SAAS,EAAE,IANU;MAOrBC,QAAQ,EAAEC,SAPW;MAQrBC,KAAK,EAAE;IARc,CAAvB;EAUD,CAXD,MAWO;IACLtB,KAAK,CAACU,KAAN,CAAYG,OAAZ,EAAqB;MACnBC,QAAQ,EAAE,eADS;MAEnBC,SAAS,EAAE,IAFQ;MAGnBC,eAAe,EAAE,KAHE;MAInBC,YAAY,EAAE,IAJK;MAKnBC,YAAY,EAAE,IALK;MAMnBC,SAAS,EAAE,IANQ;MAOnBC,QAAQ,EAAEC,SAPS;MAQnBC,KAAK,EAAE;IARY,CAArB;EAUD;AACF,CAxBM;AA0BP,OAAO,MAAMC,gBAAgB,GAAG,CAACC,YAAD,EAAeC,YAAf,KAAgC;EAC9D,IAAIC,KAAK,GAAG,CAAZ;EACAF,YAAY,CAACG,OAAb,CAAqBC,SAAS,IAAI;IAChCH,YAAY,CAACE,OAAb,CAAqBE,SAAS,IAAI;MAChC,IAAID,SAAS,CAACE,QAAV,KAAuBD,SAAS,CAACC,QAArC,EAA+C;QAC7CJ,KAAK;MACN;IACF,CAJD;EAKD,CAND;EAOA,OAAOA,KAAP;AACD,CAVM;AAYP,OAAO,MAAMK,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;EAC1C,OAAOD,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAmBC,MAAM,IAAIA,MAAM,CAACN,QAAP,KAAoBG,KAAK,CAACH,QAAvD,CAAP;AACD,CAFM;AAIP,OAAO,MAAMO,QAAQ,GAAG,CAAClC,WAAD,EAAcU,OAAd,KACtBV,WAAW,CAACG,GAAZ,KAAoBO,OAAO,CAACyB,MAAR,CAAehC,GAD9B;AAGP,OAAO,MAAMiC,2BAA2B,GAAG,CAACC,CAAD,EAAIC,QAAJ,EAActC,WAAd,KAA8B;EACvEuC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACD,CAAD,CAApB;EACA,OACEA,CAAC,GAAG,CAAJ,GAAQC,QAAQ,CAACG,MAAjB,IACAH,QAAQ,CAACD,CAAD,CAAR,CAAYF,MAAZ,CAAmBhC,GAAnB,KAA2BmC,QAAQ,CAACD,CAAC,GAAG,CAAL,CAAR,CAAgBF,MAAhB,CAAuBhC,GADlD,IAEAH,WAAW,CAACG,GAAZ,KAAoBmC,QAAQ,CAACD,CAAD,CAAR,CAAYF,MAAZ,CAAmBhC,GAHzC;AAKD,CAPM"},"metadata":{},"sourceType":"module"}