{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport { defaultToast, sameSenderAndNotCurrentUser, TOAST_TYPE, userSent, getTyperString } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context'; // Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet typingTimer;\n\nconst MessageView = () => {\n  _s();\n\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setNotifications,\n    setReloadCircuit,\n    unreadMessagesInChat\n  } = useChatView();\n  const {\n    socket,\n    onlineUsers\n  } = useSocket(); // const [socketConnected, setSocketConnected] = useState(false);\n\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n  console.log(unreadMessagesInChat, 'unreadMessagesInChat'); // console.log('typers from outside', typers);\n  // So I am thinking that I can definitely scroll into view whatever message is actually clicked within whatever chat, I don't see why that would not be possible?\n  // Pretty cool, when the component actually mounts, the ref for the element gets passed into the callback function, could actually do some pretyy coll things with this, like making an animation or shake the screen or bounce the message or anything when the message actually enters the screen...\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      setReloadCircuit(true);\n\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage\n          })\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr => onlineUserArr.includes(user._id));\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        }); // Log the notification for every user that is offline so it appears when they log in\n\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          const logNotificationForSomeoneNotOnline = await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message,\n              userId: user._id\n            })\n          });\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(`http://localhost:4000/api/message/${activeChat[0]._id}`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${currentUser.token}`\n      }\n    });\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message\n            })\n          });\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [socket, activeChat, setNotifications, currentUser.token]);\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n  const setRef = useCallback(node => {\n    if (node && isTyping && isScrolledIntoView(node)) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    } else if (node && !isTyping) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, [isTyping]);\n\n  function isScrolledIntoView(el) {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom; // Only completely visible elements return true:\n\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight; // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n\n    return isVisible;\n  } // What is the best way to make it so that the text bubble can expland if it needs to??\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-view-container\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      type: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-view-active-chat-container\",\n        children: messages.length > 0 && messages.map((message, i) => {\n          const lastMessageBool = messages.length - 1 === i + 1;\n          const userSentBool = userSent(currentUser, message);\n          const sameSenderAndNotCurrentUserBool = sameSenderAndNotCurrentUser(i, messages, currentUser); // const isFirstMessageInNotifications =\n          //   notifications\n          //     .filter(\n          //       notification => notification.chat._id === message.chat._id\n          //     )\n          //     .at(-1).message._id === message._id;\n          // console.log(isFirstMessageInNotifications, message);\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: lastMessageBool ? setRef : null,\n            style: i === 0 ? {\n              paddingTop: '6px'\n            } : {},\n            className: `message-view-message-container ${userSentBool ? 'user-sent' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-view-message-image-container\",\n              style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                visibility: 'hidden'\n              } : {\n                marginTop: '2px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                height: \"100%\",\n                src: message.sender.picture,\n                alt: \"profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-view-text-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-text\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                  display: 'none'\n                } : {},\n                className: \"message-view-text-info\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"@\", !userSentBool ? message.sender.userName : 'You']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lottie-container\",\n        children: [typers.length ? getTyperString(typers) : '', /*#__PURE__*/_jsxDEV(Lottie, {\n          animationData: animationData,\n          loop: true,\n          autoplay: true,\n          style: {\n            height: '16px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-editable\",\n        \"data-text\": `Message `,\n        contentEditable: true,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageView, \"sHDun/h5dnbfa9Y2g6f/ytl2M2w=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = MessageView;\nexport default MessageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageView\");","map":{"version":3,"names":["useCallback","useEffect","useState","io","Lottie","useChatView","Spinner","useAuthentication","animationData","defaultToast","sameSenderAndNotCurrentUser","TOAST_TYPE","userSent","getTyperString","useSocket","typingTimer","MessageView","currentUser","activeChat","setNotifications","setReloadCircuit","unreadMessagesInChat","socket","onlineUsers","messages","setMessages","isLoading","setIsLoading","isTyping","setIsTyping","typing","setTyping","typers","setTypers","console","log","handleKeyDown","e","newMessage","target","innerHTML","key","preventDefault","response","fetch","method","headers","Authorization","token","body","JSON","stringify","chatId","_id","text","message","json","emit","prevState","chat","usersOtherThanCurrentAndOffline","users","forEach","user","isOnline","some","onlineUserArr","includes","push","logNotificationForSomeoneNotOnline","userId","error","lastTypingTime","Date","getTime","timerLength","clearTimeout","setTimeout","timeNow","timeDiff","fetchMessages","on","notification","off","typer","Set","userName","usersStillTyping","filter","length","setRef","node","isScrolledIntoView","scrollIntoView","smooth","el","rect","getBoundingClientRect","elemTop","top","elemBottom","bottom","isVisible","window","innerHeight","map","i","lastMessageBool","userSentBool","sameSenderAndNotCurrentUserBool","paddingTop","visibility","marginTop","sender","picture","display","height"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport {\n  defaultToast,\n  sameSenderAndNotCurrentUser,\n  TOAST_TYPE,\n  userSent,\n  getTyperString,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nlet typingTimer;\n\nconst MessageView = () => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const { currentUser } = useAuthentication();\n  const {\n    activeChat,\n    setNotifications,\n    setReloadCircuit,\n    unreadMessagesInChat,\n  } = useChatView();\n  const { socket, onlineUsers } = useSocket();\n\n  // const [socketConnected, setSocketConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n\n  console.log(unreadMessagesInChat, 'unreadMessagesInChat');\n\n  // console.log('typers from outside', typers);\n\n  // So I am thinking that I can definitely scroll into view whatever message is actually clicked within whatever chat, I don't see why that would not be possible?\n  // Pretty cool, when the component actually mounts, the ref for the element gets passed into the callback function, could actually do some pretyy coll things with this, like making an animation or shake the screen or bounce the message or anything when the message actually enters the screen...\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      setReloadCircuit(true);\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage,\n          }),\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr =>\n            onlineUserArr.includes(user._id)\n          );\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        });\n\n        // Log the notification for every user that is offline so it appears when they log in\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          const logNotificationForSomeoneNotOnline = await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n                userId: user._id,\n              }),\n            }\n          );\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(\n      `http://localhost:4000/api/message/${activeChat[0]._id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n              }),\n            }\n          );\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [socket, activeChat, setNotifications, currentUser.token]);\n\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n  const setRef = useCallback(\n    node => {\n      if (node && isTyping && isScrolledIntoView(node)) {\n        node.scrollIntoView({ smooth: true });\n      } else if (node && !isTyping) {\n        node.scrollIntoView({ smooth: true });\n      }\n    },\n    [isTyping]\n  );\n\n  function isScrolledIntoView(el) {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom;\n\n    // Only completely visible elements return true:\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight;\n    // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n    return isVisible;\n  }\n  // What is the best way to make it so that the text bubble can expland if it needs to??\n  return (\n    <div className=\"message-view-container\">\n      {isLoading ? (\n        <Spinner type=\"search\" />\n      ) : (\n        <>\n          <div className=\"message-view-active-chat-container\">\n            {messages.length > 0 &&\n              messages.map((message, i) => {\n                const lastMessageBool = messages.length - 1 === i + 1;\n                const userSentBool = userSent(currentUser, message);\n                const sameSenderAndNotCurrentUserBool =\n                  sameSenderAndNotCurrentUser(i, messages, currentUser);\n                // const isFirstMessageInNotifications =\n                //   notifications\n                //     .filter(\n                //       notification => notification.chat._id === message.chat._id\n                //     )\n                //     .at(-1).message._id === message._id;\n\n                // console.log(isFirstMessageInNotifications, message);\n                return (\n                  <div\n                    key={i}\n                    ref={lastMessageBool ? setRef : null}\n                    style={i === 0 ? { paddingTop: '6px' } : {}}\n                    className={`message-view-message-container ${\n                      userSentBool ? 'user-sent' : ''\n                    }`}\n                  >\n                    <div\n                      className=\"message-view-message-image-container\"\n                      style={\n                        sameSenderAndNotCurrentUserBool || userSentBool\n                          ? { visibility: 'hidden' }\n                          : { marginTop: '2px' }\n                      }\n                    >\n                      <img\n                        height=\"100%\"\n                        src={message.sender.picture}\n                        alt=\"profile\"\n                      />\n                    </div>\n                    <div className=\"message-view-text-container\">\n                      <div className=\"message-view-text\">{message.text}</div>\n                      <div\n                        style={\n                          sameSenderAndNotCurrentUserBool || userSentBool\n                            ? { display: 'none' }\n                            : {}\n                        }\n                        className=\"message-view-text-info\"\n                      >\n                        <p>\n                          @{!userSentBool ? message.sender.userName : 'You'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n\n          {isTyping && (\n            <div className=\"lottie-container\">\n              {typers.length ? getTyperString(typers) : ''}\n              <Lottie\n                animationData={animationData}\n                loop={true}\n                autoplay={true}\n                style={{ height: '16px', display: 'block' }}\n              />\n            </div>\n          )}\n\n          <div\n            className=\"send-message-editable\"\n            data-text={`Message `}\n            contentEditable\n            onKeyDown={handleKeyDown}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MessageView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}