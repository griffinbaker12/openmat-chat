{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/side-bar/side-bar.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react'; // import { ReactComponent as SearchIcon } from '../../assets/search.svg';\n\nimport ChatPreview from '../chat-preview/chat-preview.component';\nimport './side-bar.styles.scss';\nimport ContactPreview from '../contact-preview/contact-preview.component';\nimport Spinner from '../spinner/spinner.component';\nimport { useChatView, MODAL_TYPE } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { defaultToast, TOAST_TYPE } from '../../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SideBar = () => {\n  _s();\n\n  const {\n    socket\n  } = useSocket();\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    isChatViewLoading,\n    handleModal,\n    sideBarCategory,\n    activeView,\n    windowDimensions,\n    setChats,\n    activeChat,\n    setActiveChat,\n    chats,\n    setNotifications\n  } = useChatView();\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('updated chat', function (updatedChat) {\n      let removeFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let updateFlag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let checkForDuplicate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      if (!removeFlag && !updateFlag) {\n        setChats(prevState => {\n          const arr = prevState.map(chat => {\n            if (chat._id === updatedChat._id) {\n              return updatedChat;\n            } else return chat;\n          });\n          return arr;\n        });\n      }\n\n      if (removeFlag) {\n        setChats(prevState => {\n          return prevState.filter(chat => chat._id !== updatedChat._id);\n        });\n        return;\n      }\n\n      const priorChatUserNamesAndId = chats.map(chat => [chat.users.map(_ref => {\n        let {\n          userName\n        } = _ref;\n        return userName;\n      }).sort(), chat._id]);\n      const updatedChatUserNames = [...updatedChat.users].map(user => user.userName).sort();\n      const existingChatUsersAndId = priorChatUserNamesAndId.find(chat => {\n        if (chat[0].length !== updatedChatUserNames.length) return false;\n        return chat[0].every((user, i) => user === updatedChatUserNames[i]);\n      });\n\n      if (existingChatUsersAndId && checkForDuplicate) {\n        const existingChat = chats.find(chat => chat._id === existingChatUsersAndId[1]);\n        setActiveChat([existingChat]);\n        setChats(prevState => {\n          return prevState.filter(chat => chat._id !== updatedChat._id);\n        });\n        return;\n      }\n\n      if (updateFlag && activeChat[0] && updatedChat._id === activeChat[0]._id) {\n        setActiveChat([updatedChat]);\n        setChats(prevState => {\n          const arr = prevState.map(chat => {\n            if (chat._id === updatedChat._id) {\n              return updatedChat;\n            } else return chat;\n          });\n          return arr;\n        });\n        return;\n      } else if (updateFlag && chats.some(chat => chat._id === updatedChat._id)) {\n        setChats(prevState => {\n          const arr = prevState.map(chat => {\n            if (chat._id === updatedChat._id) {\n              return updatedChat;\n            } else return chat;\n          });\n          return arr;\n        });\n        return;\n      }\n    });\n    return () => socket.off('updated chat');\n  }, [socket, setChats, activeChat, setActiveChat, chats, windowDimensions.width, currentUser === null || currentUser === void 0 ? void 0 : currentUser.token, setNotifications, currentUser]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('chat creation', newChat => {\n      setChats(prevState => [newChat, ...prevState]);\n    });\n    return () => socket.off('chat creation');\n  }, [socket, setChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: windowDimensions.width > 900 ? {\n      width: '31%'\n    } : activeView === 'chat-preview' ? {\n      width: '100%'\n    } : {\n      display: 'none'\n    },\n    className: \"side-bar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"side-bar-header-title-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"My Chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: '1'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ChatPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), isChatViewLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        type: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(ContactPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 58\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"side-bar-container-generate-button\",\n      onClick: () => handleModal(MODAL_TYPE.sidebar),\n      type: \"button\",\n      children: sideBarCategory === 'conversations' ? 'New Conversation' : 'Add Friend'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SideBar, \"r1xjWRzAx+4/kUcP48cdnTB69FI=\", false, function () {\n  return [useSocket, useAuthentication, useChatView];\n});\n\n_c = SideBar;\nexport default SideBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"names":["useEffect","ChatPreview","ContactPreview","Spinner","useChatView","MODAL_TYPE","useSocket","useAuthentication","defaultToast","TOAST_TYPE","SideBar","socket","currentUser","isChatViewLoading","handleModal","sideBarCategory","activeView","windowDimensions","setChats","activeChat","setActiveChat","chats","setNotifications","on","updatedChat","removeFlag","updateFlag","checkForDuplicate","prevState","arr","map","chat","_id","filter","priorChatUserNamesAndId","users","userName","sort","updatedChatUserNames","user","existingChatUsersAndId","find","length","every","i","existingChat","some","off","width","token","newChat","display","flex","sidebar"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/side-bar/side-bar.component.jsx"],"sourcesContent":["import { useEffect } from 'react';\n// import { ReactComponent as SearchIcon } from '../../assets/search.svg';\nimport ChatPreview from '../chat-preview/chat-preview.component';\nimport './side-bar.styles.scss';\nimport ContactPreview from '../contact-preview/contact-preview.component';\nimport Spinner from '../spinner/spinner.component';\nimport { useChatView, MODAL_TYPE } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { defaultToast, TOAST_TYPE } from '../../utils/utils';\n\nconst SideBar = () => {\n  const { socket } = useSocket();\n  const { currentUser } = useAuthentication();\n  const {\n    isChatViewLoading,\n    handleModal,\n    sideBarCategory,\n    activeView,\n    windowDimensions,\n    setChats,\n    activeChat,\n    setActiveChat,\n    chats,\n    setNotifications,\n  } = useChatView();\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\n      'updated chat',\n      (\n        updatedChat,\n        removeFlag = null,\n        updateFlag = null,\n        checkForDuplicate = null\n      ) => {\n        if (!removeFlag && !updateFlag) {\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n        }\n\n        if (removeFlag) {\n          setChats(prevState => {\n            return prevState.filter(chat => chat._id !== updatedChat._id);\n          });\n          return;\n        }\n\n        const priorChatUserNamesAndId = chats.map(chat => [\n          chat.users.map(({ userName }) => userName).sort(),\n          chat._id,\n        ]);\n\n        const updatedChatUserNames = [...updatedChat.users]\n          .map(user => user.userName)\n          .sort();\n\n        const existingChatUsersAndId = priorChatUserNamesAndId.find(chat => {\n          if (chat[0].length !== updatedChatUserNames.length) return false;\n          return chat[0].every((user, i) => user === updatedChatUserNames[i]);\n        });\n\n        if (existingChatUsersAndId && checkForDuplicate) {\n          const existingChat = chats.find(\n            chat => chat._id === existingChatUsersAndId[1]\n          );\n          setActiveChat([existingChat]);\n          setChats(prevState => {\n            return prevState.filter(chat => chat._id !== updatedChat._id);\n          });\n          return;\n        }\n\n        if (\n          updateFlag &&\n          activeChat[0] &&\n          updatedChat._id === activeChat[0]._id\n        ) {\n          setActiveChat([updatedChat]);\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n          return;\n        } else if (\n          updateFlag &&\n          chats.some(chat => chat._id === updatedChat._id)\n        ) {\n          setChats(prevState => {\n            const arr = prevState.map(chat => {\n              if (chat._id === updatedChat._id) {\n                return updatedChat;\n              } else return chat;\n            });\n            return arr;\n          });\n          return;\n        }\n      }\n    );\n    return () => socket.off('updated chat');\n  }, [\n    socket,\n    setChats,\n    activeChat,\n    setActiveChat,\n    chats,\n    windowDimensions.width,\n    currentUser?.token,\n    setNotifications,\n    currentUser,\n  ]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('chat creation', newChat => {\n      setChats(prevState => [newChat, ...prevState]);\n    });\n    return () => socket.off('chat creation');\n  }, [socket, setChats]);\n\n  return (\n    <div\n      style={\n        windowDimensions.width > 900\n          ? { width: '31%' }\n          : activeView === 'chat-preview'\n          ? { width: '100%' }\n          : { display: 'none' }\n      }\n      className=\"side-bar-container\"\n    >\n      <div className=\"side-bar-header-title-container\">\n        <p>My Chats</p>\n      </div>\n\n      <div style={{ flex: '1' }}>\n        <ChatPreview />\n        {isChatViewLoading ? <Spinner type=\"search\" /> : <ContactPreview />}\n      </div>\n\n      <button\n        className=\"side-bar-container-generate-button\"\n        onClick={() => handleModal(MODAL_TYPE.sidebar)}\n        type=\"button\"\n      >\n        {sideBarCategory === 'conversations'\n          ? 'New Conversation'\n          : 'Add Friend'}\n      </button>\n    </div>\n  );\n};\n\nexport default SideBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}