{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/send-message/send-message.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useRef } from 'react';\nimport { useConversations } from '../../contexts/conversations-context';\nimport './send-message.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendMessage = () => {\n  _s();\n\n  const formRef = useRef(); // Make this a controlled component so that you can clear the text of the message button after hitting send and then add it up top in the sample text section.\n  // const { currentConversation, sendMessage } = useConversations();\n  // const inputRef = useRef();\n\n  const handleButtonPress = e => {\n    if (e.code !== 'Enter') return; // Listen for the enter key and then submit the form\n  };\n\n  const handleKeyPress = e => {\n    e.preventDefault();\n    console.log('hey'); // console.log('hello?');\n    // e.preventDefault();\n    // // if (!inputRef.current.value) return;\n    // // It would actually be pretty tough as well to update all the messages when a new day occurs, or how many days ago, and have that update live, that is not easy to do. The date itself would be easy, but how many days ago...not so much\n    // const timeMsgSent = new Date().toLocaleTimeString().split('');\n    // timeMsgSent.splice(5, 3).join();\n    // sendMessage(\n    //   currentConversation.recipients,\n    //   // inputRef.current.value,\n    //   timeMsgSent\n    // );\n    // inputRef.current.value = '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"send-message-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      ref: formRef,\n      onKeyPress: handleKeyPress,\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SendMessage, \"43yiYcpPc7V7EqBzAhVF/lXnrEM=\");\n\n_c = SendMessage;\nexport default SendMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"names":["useCallback","useRef","useConversations","SendMessage","formRef","handleButtonPress","e","code","handleKeyPress","preventDefault","console","log"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/send-message/send-message.component.jsx"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport { useConversations } from '../../contexts/conversations-context';\nimport './send-message.styles.scss';\n\nconst SendMessage = () => {\n  const formRef = useRef();\n\n  // Make this a controlled component so that you can clear the text of the message button after hitting send and then add it up top in the sample text section.\n  // const { currentConversation, sendMessage } = useConversations();\n  // const inputRef = useRef();\n\n  const handleButtonPress = e => {\n    if (e.code !== 'Enter') return;\n    // Listen for the enter key and then submit the form\n  };\n\n  const handleKeyPress = e => {\n    e.preventDefault();\n    console.log('hey');\n    // console.log('hello?');\n    // e.preventDefault();\n    // // if (!inputRef.current.value) return;\n    // // It would actually be pretty tough as well to update all the messages when a new day occurs, or how many days ago, and have that update live, that is not easy to do. The date itself would be easy, but how many days ago...not so much\n    // const timeMsgSent = new Date().toLocaleTimeString().split('');\n    // timeMsgSent.splice(5, 3).join();\n    // sendMessage(\n    //   currentConversation.recipients,\n    //   // inputRef.current.value,\n    //   timeMsgSent\n    // );\n    // inputRef.current.value = '';\n  };\n\n  return (\n    <div className=\"send-message-container\">\n      <form ref={formRef} onKeyPress={handleKeyPress}>\n        <textarea placeholder=\"Message\"></textarea>\n      </form>\n    </div>\n  );\n};\n\nexport default SendMessage;\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,OAAO,4BAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAMC,OAAO,GAAGH,MAAM,EAAtB,CADwB,CAGxB;EACA;EACA;;EAEA,MAAMI,iBAAiB,GAAGC,CAAC,IAAI;IAC7B,IAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB,OADK,CAE7B;EACD,CAHD;;EAKA,MAAMC,cAAc,GAAGF,CAAC,IAAI;IAC1BA,CAAC,CAACG,cAAF;IACAC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAF0B,CAG1B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAfD;;EAiBA,oBACE;IAAK,SAAS,EAAC,wBAAf;IAAA,uBACE;MAAM,GAAG,EAAEP,OAAX;MAAoB,UAAU,EAAEI,cAAhC;MAAA,uBACE;QAAU,WAAW,EAAC;MAAtB;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CApCD;;GAAML,W;;KAAAA,W;AAsCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}