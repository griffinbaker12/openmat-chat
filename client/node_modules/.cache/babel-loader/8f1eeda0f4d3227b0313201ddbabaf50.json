{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/add-user-dropdown/add-user-dropdown.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect, useRef } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport { TOAST_TYPE, defaultToast } from '../../utils/utils';\nimport SearchResult, { SEARCH_RESULT_TYPE } from '../search-result/search-result-component';\nimport './add-user-dropdown.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUserDropdown = _ref => {\n  _s();\n\n  let {\n    wasSoloChat\n  } = _ref;\n  const [userSearchResults, setUserSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const addUserToChatRef = useRef();\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    showAddUserInfoDropdown,\n    chats,\n    setActiveChat\n  } = useChatView();\n  const {\n    socket\n  } = useSocket();\n  useEffect(() => {\n    if (!addUserToChatRef.current) return;\n    addUserToChatRef.current.focus();\n  }, [showAddUserInfoDropdown]);\n\n  const handleTextChange = async e => {\n    const query = e.target.value;\n\n    if (!query) {\n      setUserSearchResults([]);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await fetch(`http://localhost:4000/api/user?search=${query}`, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n      const {\n        users\n      } = await response.json();\n      const usersNotAlreadyInChat = users.filter(returnedUser => {\n        return !activeChat[0].users.some(chatUser => returnedUser.userName === chatUser.userName);\n      });\n      setIsLoading(false);\n      setUserSearchResults(usersNotAlreadyInChat);\n    } catch (e) {\n      defaultToast(TOAST_TYPE.error, 'User already exists in chat');\n    }\n  }; // LETS LOOK AT THIS FIRST THING TOMORROW. WHEN YOU CREATE A SOLO CHAT AND THEN ADD SOMEONE TO THE CHAT WITH THAT PERSON, YOU GET WEIRD BEHAVIOR AND THEY GET GROUPED TOGETHER IN THE SAME CHAT. BUT THEN AFTER WE KNOCK THAT OUT, WE JUST DO THE LAST MESSAGES AND WHETHER THEY HAVE BEEN READ (JUST USE STATE AND CHECK WHETHER THEY HAVE BEEN READ; CAN STORE THEM IN AN OBJECT WITH THE MESSAGE, SENDER, TEXT, AND READ STATUS) - WHEN YOU ADD A MESSAGE IT GOES TO UNREAD BUT THEN WHEN YOU CLICK IT GOES TO READ. THEN WE JUST HANDLE NOTIFICATIONS AND WE ARE DONEZO :)\n\n\n  const handleAddUser = async e => {\n    const closestContainer = e.target.closest('.add-user-to-existing-chat-container');\n    const selectedId = closestContainer.getAttribute('name');\n    const mappedChatWithNamesAndId = chats.map(chat => [chat.users.map(_ref2 => {\n      let {\n        userName\n      } = _ref2;\n      return userName;\n    }).sort(), chat._id]);\n    const selectedUser = userSearchResults.find(user => user._id === selectedId);\n    const newSearchResults = userSearchResults.filter(user => user._id !== selectedUser._id);\n    setUserSearchResults(newSearchResults);\n    const sortedChatUsers = [...activeChat[0].users, selectedUser].map(user => user.userName).sort();\n    const existingChatUsersAndId = mappedChatWithNamesAndId.find(chat => {\n      if (chat[0].length !== sortedChatUsers.length) return false;\n      return chat[0].every((user, i) => user === sortedChatUsers[i]);\n    });\n\n    if (existingChatUsersAndId) {\n      const existingChat = chats.find(chat => chat._id === existingChatUsersAndId[1]);\n      setActiveChat([existingChat]);\n      return;\n    }\n\n    try {\n      const response = await fetch('http://localhost:4000/api/chat/addUserToChat', {\n        method: 'put',\n        headers: {\n          Authorization: `Bearer ${currentUser.token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatId: activeChat[0]._id,\n          userId: selectedId\n        })\n      });\n      const newChat = await response.json();\n\n      if (!newChat.latestMessage) {\n        socket.emit('chat update', newChat, currentUser, null, true);\n      } else {\n        socket.emit('chat update', newChat, null, null, true);\n      }\n\n      defaultToast(TOAST_TYPE.success, 'User successfully added');\n    } catch (error) {\n      defaultToast(TOAST_TYPE.failure, 'Error adding user');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-user-dropdown-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-user-dropdown-tip bottom\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-user-dropdown-content-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          placeholder: \"Search users...\",\n          onChange: handleTextChange,\n          ref: addUserToChatRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-user-dropdown-results-container\",\n          children: userSearchResults.map((searchResult, i) => /*#__PURE__*/_jsxDEV(Fragment, {\n            children: /*#__PURE__*/_jsxDEV(SearchResult, {\n              type: SEARCH_RESULT_TYPE.addUserToExistingChat,\n              handleAddUser: handleAddUser,\n              searchResult: searchResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddUserDropdown, \"B8QEuFuPGtflgFqC/aTcecd3M9c=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = AddUserDropdown;\nexport default AddUserDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUserDropdown\");","map":{"version":3,"names":["Fragment","useState","useEffect","useRef","useAuthentication","useChatView","useSocket","TOAST_TYPE","defaultToast","SearchResult","SEARCH_RESULT_TYPE","AddUserDropdown","wasSoloChat","userSearchResults","setUserSearchResults","isLoading","setIsLoading","addUserToChatRef","currentUser","activeChat","showAddUserInfoDropdown","chats","setActiveChat","socket","current","focus","handleTextChange","e","query","target","value","response","fetch","method","headers","Authorization","token","users","json","usersNotAlreadyInChat","filter","returnedUser","some","chatUser","userName","error","handleAddUser","closestContainer","closest","selectedId","getAttribute","mappedChatWithNamesAndId","map","chat","sort","_id","selectedUser","find","user","newSearchResults","sortedChatUsers","existingChatUsersAndId","length","every","i","existingChat","body","JSON","stringify","chatId","userId","newChat","latestMessage","emit","success","failure","searchResult","addUserToExistingChat"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/add-user-dropdown/add-user-dropdown.component.jsx"],"sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport { TOAST_TYPE, defaultToast } from '../../utils/utils';\nimport SearchResult, {\n  SEARCH_RESULT_TYPE,\n} from '../search-result/search-result-component';\nimport './add-user-dropdown.styles.scss';\n\nconst AddUserDropdown = ({ wasSoloChat }) => {\n  const [userSearchResults, setUserSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const addUserToChatRef = useRef();\n\n  const { currentUser } = useAuthentication();\n  const { activeChat, showAddUserInfoDropdown, chats, setActiveChat } =\n    useChatView();\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    if (!addUserToChatRef.current) return;\n    addUserToChatRef.current.focus();\n  }, [showAddUserInfoDropdown]);\n\n  const handleTextChange = async e => {\n    const query = e.target.value;\n    if (!query) {\n      setUserSearchResults([]);\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const response = await fetch(\n        `http://localhost:4000/api/user?search=${query}`,\n        {\n          method: 'get',\n          headers: { Authorization: `Bearer ${currentUser.token}` },\n        }\n      );\n      const { users } = await response.json();\n\n      const usersNotAlreadyInChat = users.filter(returnedUser => {\n        return !activeChat[0].users.some(\n          chatUser => returnedUser.userName === chatUser.userName\n        );\n      });\n\n      setIsLoading(false);\n\n      setUserSearchResults(usersNotAlreadyInChat);\n    } catch (e) {\n      defaultToast(TOAST_TYPE.error, 'User already exists in chat');\n    }\n  };\n\n  // LETS LOOK AT THIS FIRST THING TOMORROW. WHEN YOU CREATE A SOLO CHAT AND THEN ADD SOMEONE TO THE CHAT WITH THAT PERSON, YOU GET WEIRD BEHAVIOR AND THEY GET GROUPED TOGETHER IN THE SAME CHAT. BUT THEN AFTER WE KNOCK THAT OUT, WE JUST DO THE LAST MESSAGES AND WHETHER THEY HAVE BEEN READ (JUST USE STATE AND CHECK WHETHER THEY HAVE BEEN READ; CAN STORE THEM IN AN OBJECT WITH THE MESSAGE, SENDER, TEXT, AND READ STATUS) - WHEN YOU ADD A MESSAGE IT GOES TO UNREAD BUT THEN WHEN YOU CLICK IT GOES TO READ. THEN WE JUST HANDLE NOTIFICATIONS AND WE ARE DONEZO :)\n\n  const handleAddUser = async e => {\n    const closestContainer = e.target.closest(\n      '.add-user-to-existing-chat-container'\n    );\n    const selectedId = closestContainer.getAttribute('name');\n\n    const mappedChatWithNamesAndId = chats.map(chat => [\n      chat.users.map(({ userName }) => userName).sort(),\n      chat._id,\n    ]);\n\n    const selectedUser = userSearchResults.find(\n      user => user._id === selectedId\n    );\n\n    const newSearchResults = userSearchResults.filter(\n      user => user._id !== selectedUser._id\n    );\n\n    setUserSearchResults(newSearchResults);\n\n    const sortedChatUsers = [...activeChat[0].users, selectedUser]\n      .map(user => user.userName)\n      .sort();\n\n    const existingChatUsersAndId = mappedChatWithNamesAndId.find(chat => {\n      if (chat[0].length !== sortedChatUsers.length) return false;\n      return chat[0].every((user, i) => user === sortedChatUsers[i]);\n    });\n\n    if (existingChatUsersAndId) {\n      const existingChat = chats.find(\n        chat => chat._id === existingChatUsersAndId[1]\n      );\n      setActiveChat([existingChat]);\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        'http://localhost:4000/api/chat/addUserToChat',\n        {\n          method: 'put',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            userId: selectedId,\n          }),\n        }\n      );\n      const newChat = await response.json();\n      if (!newChat.latestMessage) {\n        socket.emit('chat update', newChat, currentUser, null, true);\n      } else {\n        socket.emit('chat update', newChat, null, null, true);\n      }\n      defaultToast(TOAST_TYPE.success, 'User successfully added');\n    } catch (error) {\n      defaultToast(TOAST_TYPE.failure, 'Error adding user');\n    }\n  };\n\n  return (\n    <div className=\"add-user-dropdown-container\">\n      <div className=\"add-user-dropdown-tip bottom\">\n        <div className=\"add-user-dropdown-content-container\">\n          <input\n            type=\"search\"\n            placeholder=\"Search users...\"\n            onChange={handleTextChange}\n            ref={addUserToChatRef}\n          />\n          <div className=\"add-user-dropdown-results-container\">\n            {userSearchResults.map((searchResult, i) => (\n              <Fragment key={i}>\n                <SearchResult\n                  type={SEARCH_RESULT_TYPE.addUserToExistingChat}\n                  handleAddUser={handleAddUser}\n                  searchResult={searchResult}\n                />\n              </Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddUserDropdown;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,mBAAzC;AACA,OAAOC,YAAP,IACEC,kBADF,QAEO,0CAFP;AAGA,OAAO,iCAAP;;;AAEA,MAAMC,eAAe,GAAG,QAAqB;EAAA;;EAAA,IAApB;IAAEC;EAAF,CAAoB;EAC3C,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,EAAD,CAA1D;EACA,MAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAMgB,gBAAgB,GAAGd,MAAM,EAA/B;EAEA,MAAM;IAAEe;EAAF,IAAkBd,iBAAiB,EAAzC;EACA,MAAM;IAAEe,UAAF;IAAcC,uBAAd;IAAuCC,KAAvC;IAA8CC;EAA9C,IACJjB,WAAW,EADb;EAEA,MAAM;IAAEkB;EAAF,IAAajB,SAAS,EAA5B;EAEAJ,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,gBAAgB,CAACO,OAAtB,EAA+B;IAC/BP,gBAAgB,CAACO,OAAjB,CAAyBC,KAAzB;EACD,CAHQ,EAGN,CAACL,uBAAD,CAHM,CAAT;;EAKA,MAAMM,gBAAgB,GAAG,MAAMC,CAAN,IAAW;IAClC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAvB;;IACA,IAAI,CAACF,KAAL,EAAY;MACVd,oBAAoB,CAAC,EAAD,CAApB;MACA;IACD;;IACD,IAAI;MACFE,YAAY,CAAC,IAAD,CAAZ;MACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CACzB,yCAAwCJ,KAAM,EADrB,EAE1B;QACEK,MAAM,EAAE,KADV;QAEEC,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASjB,WAAW,CAACkB,KAAM;QAA7C;MAFX,CAF0B,CAA5B;MAOA,MAAM;QAAEC;MAAF,IAAY,MAAMN,QAAQ,CAACO,IAAT,EAAxB;MAEA,MAAMC,qBAAqB,GAAGF,KAAK,CAACG,MAAN,CAAaC,YAAY,IAAI;QACzD,OAAO,CAACtB,UAAU,CAAC,CAAD,CAAV,CAAckB,KAAd,CAAoBK,IAApB,CACNC,QAAQ,IAAIF,YAAY,CAACG,QAAb,KAA0BD,QAAQ,CAACC,QADzC,CAAR;MAGD,CAJ6B,CAA9B;MAMA5B,YAAY,CAAC,KAAD,CAAZ;MAEAF,oBAAoB,CAACyB,qBAAD,CAApB;IACD,CApBD,CAoBE,OAAOZ,CAAP,EAAU;MACVnB,YAAY,CAACD,UAAU,CAACsC,KAAZ,EAAmB,6BAAnB,CAAZ;IACD;EACF,CA7BD,CAf2C,CA8C3C;;;EAEA,MAAMC,aAAa,GAAG,MAAMnB,CAAN,IAAW;IAC/B,MAAMoB,gBAAgB,GAAGpB,CAAC,CAACE,MAAF,CAASmB,OAAT,CACvB,sCADuB,CAAzB;IAGA,MAAMC,UAAU,GAAGF,gBAAgB,CAACG,YAAjB,CAA8B,MAA9B,CAAnB;IAEA,MAAMC,wBAAwB,GAAG9B,KAAK,CAAC+B,GAAN,CAAUC,IAAI,IAAI,CACjDA,IAAI,CAAChB,KAAL,CAAWe,GAAX,CAAe;MAAA,IAAC;QAAER;MAAF,CAAD;MAAA,OAAkBA,QAAlB;IAAA,CAAf,EAA2CU,IAA3C,EADiD,EAEjDD,IAAI,CAACE,GAF4C,CAAlB,CAAjC;IAKA,MAAMC,YAAY,GAAG3C,iBAAiB,CAAC4C,IAAlB,CACnBC,IAAI,IAAIA,IAAI,CAACH,GAAL,KAAaN,UADF,CAArB;IAIA,MAAMU,gBAAgB,GAAG9C,iBAAiB,CAAC2B,MAAlB,CACvBkB,IAAI,IAAIA,IAAI,CAACH,GAAL,KAAaC,YAAY,CAACD,GADX,CAAzB;IAIAzC,oBAAoB,CAAC6C,gBAAD,CAApB;IAEA,MAAMC,eAAe,GAAG,CAAC,GAAGzC,UAAU,CAAC,CAAD,CAAV,CAAckB,KAAlB,EAAyBmB,YAAzB,EACrBJ,GADqB,CACjBM,IAAI,IAAIA,IAAI,CAACd,QADI,EAErBU,IAFqB,EAAxB;IAIA,MAAMO,sBAAsB,GAAGV,wBAAwB,CAACM,IAAzB,CAA8BJ,IAAI,IAAI;MACnE,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQS,MAAR,KAAmBF,eAAe,CAACE,MAAvC,EAA+C,OAAO,KAAP;MAC/C,OAAOT,IAAI,CAAC,CAAD,CAAJ,CAAQU,KAAR,CAAc,CAACL,IAAD,EAAOM,CAAP,KAAaN,IAAI,KAAKE,eAAe,CAACI,CAAD,CAAnD,CAAP;IACD,CAH8B,CAA/B;;IAKA,IAAIH,sBAAJ,EAA4B;MAC1B,MAAMI,YAAY,GAAG5C,KAAK,CAACoC,IAAN,CACnBJ,IAAI,IAAIA,IAAI,CAACE,GAAL,KAAaM,sBAAsB,CAAC,CAAD,CADxB,CAArB;MAGAvC,aAAa,CAAC,CAAC2C,YAAD,CAAD,CAAb;MACA;IACD;;IAED,IAAI;MACF,MAAMlC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8CAD0B,EAE1B;QACEC,MAAM,EAAE,KADV;QAEEC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASjB,WAAW,CAACkB,KAAM,EADpC;UAEP,gBAAgB;QAFT,CAFX;QAME8B,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACnBC,MAAM,EAAElD,UAAU,CAAC,CAAD,CAAV,CAAcoC,GADH;UAEnBe,MAAM,EAAErB;QAFW,CAAf;MANR,CAF0B,CAA5B;MAcA,MAAMsB,OAAO,GAAG,MAAMxC,QAAQ,CAACO,IAAT,EAAtB;;MACA,IAAI,CAACiC,OAAO,CAACC,aAAb,EAA4B;QAC1BjD,MAAM,CAACkD,IAAP,CAAY,aAAZ,EAA2BF,OAA3B,EAAoCrD,WAApC,EAAiD,IAAjD,EAAuD,IAAvD;MACD,CAFD,MAEO;QACLK,MAAM,CAACkD,IAAP,CAAY,aAAZ,EAA2BF,OAA3B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD;MACD;;MACD/D,YAAY,CAACD,UAAU,CAACmE,OAAZ,EAAqB,yBAArB,CAAZ;IACD,CAtBD,CAsBE,OAAO7B,KAAP,EAAc;MACdrC,YAAY,CAACD,UAAU,CAACoE,OAAZ,EAAqB,mBAArB,CAAZ;IACD;EACF,CA/DD;;EAiEA,oBACE;IAAK,SAAS,EAAC,6BAAf;IAAA,uBACE;MAAK,SAAS,EAAC,8BAAf;MAAA,uBACE;QAAK,SAAS,EAAC,qCAAf;QAAA,wBACE;UACE,IAAI,EAAC,QADP;UAEE,WAAW,EAAC,iBAFd;UAGE,QAAQ,EAAEjD,gBAHZ;UAIE,GAAG,EAAET;QAJP;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UAAK,SAAS,EAAC,qCAAf;UAAA,UACGJ,iBAAiB,CAACuC,GAAlB,CAAsB,CAACwB,YAAD,EAAeZ,CAAf,kBACrB,QAAC,QAAD;YAAA,uBACE,QAAC,YAAD;cACE,IAAI,EAAEtD,kBAAkB,CAACmE,qBAD3B;cAEE,aAAa,EAAE/B,aAFjB;cAGE,YAAY,EAAE8B;YAHhB;cAAA;cAAA;cAAA;YAAA;UADF,GAAeZ,CAAf;YAAA;YAAA;YAAA;UAAA,QADD;QADH;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CA1ID;;GAAMrD,e;UAKoBP,iB,EAEtBC,W,EACiBC,S;;;KARfK,e;AA4IN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}