{"ast":null,"code":"import _regeneratorRuntime from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/griffinbaker/Desktop/chat-application/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState,useRef}from'react';import{useAuthentication}from'../../contexts/authentication-context';import{useChatView}from'../../contexts/chat-view-context';import{useSocket}from'../../contexts/socket-context';import UserInfoModal from'../user-info-modal/user-info-modal.component';import{ReactComponent as ChevronRight}from'../../assets/chevron-right.svg';import{ReactComponent as EditPencil}from'../../assets/pencil.svg';import AddUserDropdown from'../add-user-dropdown/add-user-dropdown.component';import'./chat-info-modal.styles.scss';import Tooltip from'../tooltip/tooltip.component';import{defaultToast,TOAST_TYPE,generateChatNameForSoloChats}from'../../utils/utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatInfoModal=function ChatInfoModal(_ref){var userFlag=_ref.userFlag;var _useAuthentication=useAuthentication(),currentUser=_useAuthentication.currentUser;var _useChatView=useChatView(),activeChat=_useChatView.activeChat,setActiveChat=_useChatView.setActiveChat,showModal=_useChatView.showModal,closeModal=_useChatView.closeModal,showAddUserInfoDropdown=_useChatView.showAddUserInfoDropdown,setShowAddUserInfoDropdown=_useChatView.setShowAddUserInfoDropdown,showActiveUserWithinChatInfo=_useChatView.showActiveUserWithinChatInfo,setShowActiveUserWithinChatInfo=_useChatView.setShowActiveUserWithinChatInfo,setActiveUserInfo=_useChatView.setActiveUserInfo,setIsActiveUserCurrentUser=_useChatView.setIsActiveUserCurrentUser;var _useSocket=useSocket(),socket=_useSocket.socket;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showChatEdit=_useState2[0],setShowChatEdit=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newChatName=_useState4[0],setNewChatName=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),wasSoloChat=_useState6[0],setWasSoloChat=_useState6[1];var chatEditInputRef=useRef(null);// const [isLoading, setIsLoading] = useState(false);\n// So yeah, cool, the chats will be updated whenever you create a new chat from the modal so can easily tell / check duplicate chats are being\nuseEffect(function(){if(!chatEditInputRef.current)return;chatEditInputRef.current.focus();},[showChatEdit]);useEffect(function(){if(!activeChat[0])return;if(!activeChat[0].isGroupChat){setWasSoloChat(true);setNewChatName(generateChatNameForSoloChats(activeChat[0].users,currentUser));return;}setNewChatName(activeChat[0].chatName);},[activeChat,showChatEdit,currentUser]);var checkForUsedToSoloAndCloseModal=function checkForUsedToSoloAndCloseModal(){if(wasSoloChat&&!activeChat[0].chatName||activeChat[0].isGroupChat&&!activeChat[0].chatName){setShowChatEdit(true);chatEditInputRef.current.focus();defaultToast(TOAST_TYPE.failure,'Please add chat name');return;}setWasSoloChat(false);closeModal();setShowChatEdit(false);return;};// Make sure that you update the users in the chat so that they are actually there when you click on them, may need to do a refetch of the chats, yeah because don't want to directly modify the state\nvar updateActiveUserChatInfo=function updateActiveUserChatInfo(e){var selectedUserId=e.target.closest('.group-chat-modal-user-info-container').getAttribute('name');var selectedUser=activeChat[0].users.filter(function(user){return user._id===selectedUserId;});setActiveUserInfo(selectedUser[0]);setIsActiveUserCurrentUser(false);setShowActiveUserWithinChatInfo(true);};var closeAddUserInfoAndStopPropagation=function closeAddUserInfoAndStopPropagation(e){e.stopPropagation();var buttonPress=e.target.classList.contains('chat-info-modal-content-close-button');if(buttonPress){checkForUsedToSoloAndCloseModal();}};var handleShowUserDropdown=function handleShowUserDropdown(){return setShowAddUserInfoDropdown(function(prevState){return!prevState;});};var handleLeaveChat=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var response,updatedChat;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch('http://localhost:4000/api/chat/leaveChat',{method:'put',headers:{Authorization:\"Bearer \".concat(currentUser.token),'Content-Type':'application/json'},body:JSON.stringify({chatId:activeChat[0]._id})});case 3:response=_context.sent;_context.next=6;return response.json();case 6:updatedChat=_context.sent;closeModal();if(!updatedChat.latestMessage){socket.emit('chat update',updatedChat,currentUser,true,true);}else{socket.emit('chat update',updatedChat,null,true,true);}setActiveChat([]);defaultToast(TOAST_TYPE.success,'You have left the chat');_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);defaultToast(TOAST_TYPE.failure,'Error leaving chat');case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function handleLeaveChat(_x){return _ref2.apply(this,arguments);};}();var handleKeyChange=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e){var response,updatedChat;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(e.code!=='Enter')){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:if(!(newChatName===activeChat[0].chatName)){_context2.next=5;break;}setShowChatEdit(false);return _context2.abrupt(\"return\");case 5:if(newChatName){_context2.next=10;break;}defaultToast(TOAST_TYPE.failure,'Chat name cannot be blank');setNewChatName(activeChat[0].chatName);setShowChatEdit(false);return _context2.abrupt(\"return\");case 10:_context2.prev=10;_context2.next=13;return fetch('http://localhost:4000/api/chat/renameChat',{method:'put',headers:{Authorization:\"Bearer \".concat(currentUser.token),'Content-Type':'application/json'},body:JSON.stringify({chatId:activeChat[0]._id,chatName:newChatName})});case 13:response=_context2.sent;_context2.next=16;return response.json();case 16:updatedChat=_context2.sent;setActiveChat([updatedChat]);setShowChatEdit(false);if(!updatedChat.latestMessage){socket.emit('chat update',updatedChat,currentUser,null,true);}else{socket.emit('chat update',updatedChat,null,null,true);}_context2.next=25;break;case 22:_context2.prev=22;_context2.t0=_context2[\"catch\"](10);defaultToast(TOAST_TYPE.failure,'Error re-naming chat');case 25:case\"end\":return _context2.stop();}}},_callee2,null,[[10,22]]);}));return function handleKeyChange(_x2){return _ref3.apply(this,arguments);};}();var handleChatNameChange=function handleChatNameChange(e){return setNewChatName(e.target.value);};var handleEditChatName=function handleEditChatName(){setShowChatEdit(function(prevState){return!prevState;});};// So what I am going to need to is to set the state of the input field to be equal to the current chat name so that when you switch the component on click the name is already filled\n// This is sick you can also just store an object with the different users that you visited and each time you go back you go back to the prior user...apparently can also use a graph for this as well\n// Check if it is a solo chat or a group chat, and then render a different modal accordingly\n// Could have also made calsses that I would apply across the different modals, but at this point..\n// If it is a group chat, then I want to show the entire chat, and then once you click on a user, I actually just want to switch to not show the group chat, but to show the actual user info-modal, hide the group chat, and include a back arrow\n//Right now I am thinking that you render both, but you hid ohe programatically. I think I can do this, never done it before, but should not be too bad hopefuly. When you click on user profile or on one of the names in the chat, hide the chat info display and show the user info modal\nreturn activeChat[0]&&!userFlag?/*#__PURE__*/_jsxs(\"div\",{name:\"chat-info-modal\",className:\"chat-info-modal-container \".concat(showModal?'active':''),onClick:checkForUsedToSoloAndCloseModal,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-info-modal-content\",onClick:closeAddUserInfoAndStopPropagation,style:showActiveUserWithinChatInfo?{display:'none'}:{visibility:'visible'},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat-modal-header\",children:[/*#__PURE__*/_jsx(\"input\",{ref:chatEditInputRef,className:\"group-chat-modal-header-chat-name\",onKeyDown:handleKeyChange,onChange:handleChatNameChange,value:newChatName,style:!showChatEdit?{display:'none'}:{visibility:'visible'}}),/*#__PURE__*/_jsx(\"p\",{style:!showChatEdit?{visibility:'visible'}:{display:'none'},children:activeChat[0].isGroupChat?activeChat[0].chatName:newChatName}),activeChat[0].isGroupChat&&/*#__PURE__*/_jsx(Tooltip,{content:\"Click to edit chat name\",children:/*#__PURE__*/_jsx(\"div\",{className:\"edit-pencil-container\",onClick:handleEditChatName,children:/*#__PURE__*/_jsx(EditPencil,{})})}),/*#__PURE__*/_jsx(\"button\",{className:\"chat-info-modal-content-close-button\",type:\"button\",style:{color:'white',marginLeft:'auto'},children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat-modal-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat-modal-chat-participants-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat-modal-member-header-container\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Members\"}),/*#__PURE__*/_jsx(Tooltip,{content:\"Click to add user\",children:/*#__PURE__*/_jsx(\"div\",{onClick:handleShowUserDropdown,className:\"add-button-container\",children:/*#__PURE__*/_jsx(\"span\",{children:\"+\"})})}),showAddUserInfoDropdown&&/*#__PURE__*/_jsx(AddUserDropdown,{wasSoloChat:wasSoloChat})]}),/*#__PURE__*/_jsx(\"div\",{onClick:updateActiveUserChatInfo,className:\"group-chat-modal-member-container\",children:activeChat[0].users.filter(function(user){return user._id!==currentUser._id;}).map(function(user,i){return/*#__PURE__*/_jsxs(\"div\",{name:user._id,className:\"group-chat-modal-user-info-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"group-chat-modal-user-info-picture-container\",children:/*#__PURE__*/_jsx(\"img\",{height:\"100%\",src:user.picture,alt:\"user\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"user-name-user-userName-container\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:user.name}),/*#__PURE__*/_jsxs(\"p\",{children:[\"@\",user.userName]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"chevron-container\",children:/*#__PURE__*/_jsx(ChevronRight,{})})]},user._id);})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-info-modal-button\",children:activeChat[0].isGroupChat&&/*#__PURE__*/_jsx(\"button\",{onClick:handleLeaveChat,className:\"leave-chat-button\",type:\"submit\",children:\"Leave Chat\"})})]})]}),/*#__PURE__*/_jsx(UserInfoModal,{style:showActiveUserWithinChatInfo?{visibility:'visible'}:{visibility:'hidden'}})]}):/*#__PURE__*/_jsx(UserInfoModal,{});};export default ChatInfoModal;","map":{"version":3,"names":["useEffect","useState","useRef","useAuthentication","useChatView","useSocket","UserInfoModal","ReactComponent","ChevronRight","EditPencil","AddUserDropdown","Tooltip","defaultToast","TOAST_TYPE","generateChatNameForSoloChats","ChatInfoModal","userFlag","currentUser","activeChat","setActiveChat","showModal","closeModal","showAddUserInfoDropdown","setShowAddUserInfoDropdown","showActiveUserWithinChatInfo","setShowActiveUserWithinChatInfo","setActiveUserInfo","setIsActiveUserCurrentUser","socket","showChatEdit","setShowChatEdit","newChatName","setNewChatName","wasSoloChat","setWasSoloChat","chatEditInputRef","current","focus","isGroupChat","users","chatName","checkForUsedToSoloAndCloseModal","failure","updateActiveUserChatInfo","e","selectedUserId","target","closest","getAttribute","selectedUser","filter","user","_id","closeAddUserInfoAndStopPropagation","stopPropagation","buttonPress","classList","contains","handleShowUserDropdown","prevState","handleLeaveChat","fetch","method","headers","Authorization","token","body","JSON","stringify","chatId","response","json","updatedChat","latestMessage","emit","success","handleKeyChange","code","handleChatNameChange","value","handleEditChatName","display","visibility","color","marginLeft","map","i","picture","name","userName"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/chat-info-modal/chat-info-modal.components.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport { useSocket } from '../../contexts/socket-context';\nimport UserInfoModal from '../user-info-modal/user-info-modal.component';\nimport { ReactComponent as ChevronRight } from '../../assets/chevron-right.svg';\nimport { ReactComponent as EditPencil } from '../../assets/pencil.svg';\nimport AddUserDropdown from '../add-user-dropdown/add-user-dropdown.component';\nimport './chat-info-modal.styles.scss';\nimport Tooltip from '../tooltip/tooltip.component';\nimport {\n  defaultToast,\n  TOAST_TYPE,\n  generateChatNameForSoloChats,\n} from '../../utils/utils';\n\nconst ChatInfoModal = ({ userFlag }) => {\n  const { currentUser } = useAuthentication();\n  const {\n    activeChat,\n    setActiveChat,\n    showModal,\n    closeModal,\n    showAddUserInfoDropdown,\n    setShowAddUserInfoDropdown,\n    showActiveUserWithinChatInfo,\n    setShowActiveUserWithinChatInfo,\n    setActiveUserInfo,\n    setIsActiveUserCurrentUser,\n  } = useChatView();\n  const { socket } = useSocket();\n\n  const [showChatEdit, setShowChatEdit] = useState(false);\n  const [newChatName, setNewChatName] = useState('');\n  const [wasSoloChat, setWasSoloChat] = useState(false);\n  const chatEditInputRef = useRef(null);\n  // const [isLoading, setIsLoading] = useState(false);\n\n  // So yeah, cool, the chats will be updated whenever you create a new chat from the modal so can easily tell / check duplicate chats are being\n\n  useEffect(() => {\n    if (!chatEditInputRef.current) return;\n    chatEditInputRef.current.focus();\n  }, [showChatEdit]);\n\n  useEffect(() => {\n    if (!activeChat[0]) return;\n    if (!activeChat[0].isGroupChat) {\n      setWasSoloChat(true);\n      setNewChatName(\n        generateChatNameForSoloChats(activeChat[0].users, currentUser)\n      );\n      return;\n    }\n    setNewChatName(activeChat[0].chatName);\n  }, [activeChat, showChatEdit, currentUser]);\n\n  const checkForUsedToSoloAndCloseModal = () => {\n    if (\n      (wasSoloChat && !activeChat[0].chatName) ||\n      (activeChat[0].isGroupChat && !activeChat[0].chatName)\n    ) {\n      setShowChatEdit(true);\n      chatEditInputRef.current.focus();\n      defaultToast(TOAST_TYPE.failure, 'Please add chat name');\n      return;\n    }\n    setWasSoloChat(false);\n    closeModal();\n    setShowChatEdit(false);\n    return;\n  };\n\n  // Make sure that you update the users in the chat so that they are actually there when you click on them, may need to do a refetch of the chats, yeah because don't want to directly modify the state\n\n  const updateActiveUserChatInfo = e => {\n    const selectedUserId = e.target\n      .closest('.group-chat-modal-user-info-container')\n      .getAttribute('name');\n\n    const selectedUser = activeChat[0].users.filter(\n      user => user._id === selectedUserId\n    );\n\n    setActiveUserInfo(selectedUser[0]);\n    setIsActiveUserCurrentUser(false);\n    setShowActiveUserWithinChatInfo(true);\n  };\n\n  const closeAddUserInfoAndStopPropagation = e => {\n    e.stopPropagation();\n    const buttonPress = e.target.classList.contains(\n      'chat-info-modal-content-close-button'\n    );\n\n    if (buttonPress) {\n      checkForUsedToSoloAndCloseModal();\n    }\n  };\n\n  const handleShowUserDropdown = () =>\n    setShowAddUserInfoDropdown(prevState => !prevState);\n\n  const handleLeaveChat = async e => {\n    try {\n      const response = await fetch('http://localhost:4000/api/chat/leaveChat', {\n        method: 'put',\n        headers: {\n          Authorization: `Bearer ${currentUser.token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chatId: activeChat[0]._id,\n        }),\n      });\n\n      const updatedChat = await response.json();\n      closeModal();\n\n      if (!updatedChat.latestMessage) {\n        socket.emit('chat update', updatedChat, currentUser, true, true);\n      } else {\n        socket.emit('chat update', updatedChat, null, true, true);\n      }\n\n      setActiveChat([]);\n      defaultToast(TOAST_TYPE.success, 'You have left the chat');\n    } catch (error) {\n      defaultToast(TOAST_TYPE.failure, 'Error leaving chat');\n    }\n  };\n\n  const handleKeyChange = async e => {\n    if (e.code !== 'Enter') return;\n    if (newChatName === activeChat[0].chatName) {\n      setShowChatEdit(false);\n      return;\n    }\n    if (!newChatName) {\n      defaultToast(TOAST_TYPE.failure, 'Chat name cannot be blank');\n      setNewChatName(activeChat[0].chatName);\n      setShowChatEdit(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        'http://localhost:4000/api/chat/renameChat',\n        {\n          method: 'put',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            chatName: newChatName,\n          }),\n        }\n      );\n\n      const updatedChat = await response.json();\n      setActiveChat([updatedChat]);\n      setShowChatEdit(false);\n      if (!updatedChat.latestMessage) {\n        socket.emit('chat update', updatedChat, currentUser, null, true);\n      } else {\n        socket.emit('chat update', updatedChat, null, null, true);\n      }\n    } catch (error) {\n      defaultToast(TOAST_TYPE.failure, 'Error re-naming chat');\n    }\n  };\n\n  const handleChatNameChange = e => setNewChatName(e.target.value);\n\n  const handleEditChatName = () => {\n    setShowChatEdit(prevState => !prevState);\n  };\n  // So what I am going to need to is to set the state of the input field to be equal to the current chat name so that when you switch the component on click the name is already filled\n\n  // This is sick you can also just store an object with the different users that you visited and each time you go back you go back to the prior user...apparently can also use a graph for this as well\n\n  // Check if it is a solo chat or a group chat, and then render a different modal accordingly\n\n  // Could have also made calsses that I would apply across the different modals, but at this point..\n\n  // If it is a group chat, then I want to show the entire chat, and then once you click on a user, I actually just want to switch to not show the group chat, but to show the actual user info-modal, hide the group chat, and include a back arrow\n\n  //Right now I am thinking that you render both, but you hid ohe programatically. I think I can do this, never done it before, but should not be too bad hopefuly. When you click on user profile or on one of the names in the chat, hide the chat info display and show the user info modal\n\n  return activeChat[0] && !userFlag ? (\n    <div\n      name=\"chat-info-modal\"\n      className={`chat-info-modal-container ${showModal ? 'active' : ''}`}\n      onClick={checkForUsedToSoloAndCloseModal}\n    >\n      <div\n        className=\"chat-info-modal-content\"\n        onClick={closeAddUserInfoAndStopPropagation}\n        style={\n          showActiveUserWithinChatInfo\n            ? { display: 'none' }\n            : { visibility: 'visible' }\n        }\n      >\n        <div className=\"group-chat-modal-header\">\n          <input\n            ref={chatEditInputRef}\n            className=\"group-chat-modal-header-chat-name\"\n            onKeyDown={handleKeyChange}\n            onChange={handleChatNameChange}\n            value={newChatName}\n            style={\n              !showChatEdit ? { display: 'none' } : { visibility: 'visible' }\n            }\n          />\n          <p\n            style={\n              !showChatEdit ? { visibility: 'visible' } : { display: 'none' }\n            }\n          >\n            {activeChat[0].isGroupChat ? activeChat[0].chatName : newChatName}\n          </p>\n          {activeChat[0].isGroupChat && (\n            <Tooltip content=\"Click to edit chat name\">\n              <div\n                className=\"edit-pencil-container\"\n                onClick={handleEditChatName}\n              >\n                <EditPencil />\n              </div>\n            </Tooltip>\n          )}\n          <button\n            className=\"chat-info-modal-content-close-button\"\n            type=\"button\"\n            style={{ color: 'white', marginLeft: 'auto' }}\n          >\n            &#x2715;\n          </button>\n        </div>\n        <div className=\"group-chat-modal-body\">\n          <div className=\"group-chat-modal-chat-participants-container\">\n            <div className=\"group-chat-modal-member-header-container\">\n              <p>Members</p>\n              <Tooltip content=\"Click to add user\">\n                <div\n                  onClick={handleShowUserDropdown}\n                  className=\"add-button-container\"\n                >\n                  <span>+</span>\n                </div>\n              </Tooltip>\n              {showAddUserInfoDropdown && (\n                <AddUserDropdown wasSoloChat={wasSoloChat} />\n              )}\n            </div>\n            <div\n              onClick={updateActiveUserChatInfo}\n              className=\"group-chat-modal-member-container\"\n            >\n              {activeChat[0].users\n                .filter(user => user._id !== currentUser._id)\n                .map((user, i) => {\n                  return (\n                    <div\n                      key={user._id}\n                      name={user._id}\n                      className=\"group-chat-modal-user-info-container\"\n                    >\n                      <div className=\"group-chat-modal-user-info-picture-container\">\n                        <img height=\"100%\" src={user.picture} alt=\"user\" />\n                      </div>\n                      <div className=\"user-name-user-userName-container\">\n                        <div>\n                          <p>{user.name}</p>\n                          <p>@{user.userName}</p>\n                        </div>\n                      </div>\n                      <div className=\"chevron-container\">\n                        <ChevronRight />\n                      </div>\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n          <div className=\"chat-info-modal-button\">\n            {activeChat[0].isGroupChat && (\n              <button\n                onClick={handleLeaveChat}\n                className=\"leave-chat-button\"\n                type=\"submit\"\n              >\n                Leave Chat\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      <UserInfoModal\n        style={\n          showActiveUserWithinChatInfo\n            ? { visibility: 'visible' }\n            : { visibility: 'hidden' }\n        }\n      />\n    </div>\n  ) : (\n    <UserInfoModal />\n  );\n};\nexport default ChatInfoModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}