{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useSidebar } from './sidebar-context';\nimport { useSocket } from './socket-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const useConversations = () => {\n  _s();\n\n  return useContext(ConversationsContext);\n};\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const ConversationsProvider = _ref => {\n  _s2();\n\n  let {\n    userName,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useState([]);\n  const {\n    chats\n  } = useSidebar();\n  const [activeChat, setActiveChat] = useState([]);\n  const socket = useSocket();\n  useEffect(() => {\n    if (chats.length === 0) return;else {\n      setActiveChat(chats[0]);\n    }\n  }, [chats]); // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients => setConversations(prevState => [...prevState, {\n    recipients,\n    messages: []\n  }]); // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender,\n      time\n    } = _ref2;\n    setConversations(prevState => {\n      const newConversationsArray = prevState.map(conversation => {\n        if (arrEqualityTest(conversation.recipients, recipients)) {\n          return { ...conversation,\n            messages: [...conversation.messages, {\n              sender,\n              text,\n              userSent: userName === sender,\n              timeStamp: time\n            }]\n          };\n        }\n\n        return conversation;\n      });\n      return [...newConversationsArray];\n    });\n  }, [setConversations, userName]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  const sendMessage = (recipients, text, time) => {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: userName,\n      time\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: {\n      conversations,\n      createConversation,\n      activeChat,\n      setActiveChat,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}; // Helper functions\n\n_s2(ConversationsProvider, \"rnV2+0Egbhd7sGnYideJtCjCDGU=\", false, function () {\n  return [useSidebar, useSocket];\n});\n\n_c = ConversationsProvider;\n\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every((recipient, i) => recipient === mappedRecipients[i]);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useSidebar","useSocket","ConversationsContext","useConversations","ConversationsProvider","userName","children","conversations","setConversations","chats","activeChat","setActiveChat","socket","length","createConversation","recipients","prevState","messages","addMessageToConversation","text","sender","time","newConversationsArray","map","conversation","arrEqualityTest","userSent","timeStamp","on","off","sendMessage","emit","mappedRecipients","receivedRecipients","sort","every","recipient","i"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/contexts/conversations-context.js"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { useSidebar } from './sidebar-context';\nimport { useSocket } from './socket-context';\n\nconst ConversationsContext = createContext();\n\nexport const useConversations = () => useContext(ConversationsContext);\n\nexport const ConversationsProvider = ({ userName, children }) => {\n  const [conversations, setConversations] = useState([]);\n  const { chats } = useSidebar();\n  const [activeChat, setActiveChat] = useState([]);\n  const socket = useSocket();\n\n  useEffect(() => {\n    if (chats.length === 0) return;\n    else {\n      setActiveChat(chats[0]);\n    }\n  }, [chats]);\n\n  // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?\n\n  const createConversation = recipients =>\n    setConversations(prevState => [...prevState, { recipients, messages: [] }]);\n\n  // And when we set up the database, this can be a unique id generated by the db instead of an index value\n  // On this object, you almost want the recipients, and the messages\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender, time }) => {\n      setConversations(prevState => {\n        const newConversationsArray = prevState.map(conversation => {\n          if (arrEqualityTest(conversation.recipients, recipients)) {\n            return {\n              ...conversation,\n              messages: [\n                ...conversation.messages,\n                {\n                  sender,\n                  text,\n                  userSent: userName === sender,\n                  timeStamp: time,\n                },\n              ],\n            };\n          }\n          return conversation;\n        });\n        return [...newConversationsArray];\n      });\n    },\n    [setConversations, userName]\n  );\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  const sendMessage = (recipients, text, time) => {\n    socket.emit('send-message', { recipients, text });\n    addMessageToConversation({ recipients, text, sender: userName, time });\n  };\n\n  return (\n    <ConversationsContext.Provider\n      value={{\n        conversations,\n        createConversation,\n        activeChat,\n        setActiveChat,\n        sendMessage,\n      }}\n    >\n      {children}\n    </ConversationsContext.Provider>\n  );\n};\n\n// Helper functions\nconst arrEqualityTest = (mappedRecipients, receivedRecipients) => {\n  if (mappedRecipients.length !== receivedRecipients.length) return false;\n  mappedRecipients.sort();\n  receivedRecipients.sort();\n  return receivedRecipients.every(\n    (recipient, i) => recipient === mappedRecipients[i]\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}