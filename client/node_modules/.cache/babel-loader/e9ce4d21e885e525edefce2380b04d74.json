{"ast":null,"code":"var _jsxFileName = \"/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport { defaultToast, sameSenderAndNotCurrentUser, TOAST_TYPE, userSent, getTyperString } from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context'; // Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet typingTimer;\n\nconst MessageView = () => {\n  _s();\n\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const {\n    currentUser\n  } = useAuthentication();\n  const {\n    activeChat,\n    setNotifications,\n    setReloadCircuit,\n    unreadMessages\n  } = useChatView();\n  const {\n    socket,\n    onlineUsers\n  } = useSocket();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]); // const [scrollToRemoveNewNotification, setScrollToRemoveNewNotification] =\n  //   useState(false);\n  // const messageViewContainer = useRef();\n  // const onScroll = e => {\n  //   if (!messageViewContainer.current) return;\n  //   const bottom =\n  //     e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n  //   if (bottom && !scrollToRemoveNewNotification) {\n  //     return;\n  //   } else {\n  //     setScrollToRemoveNewNotification(true);\n  //   }\n  // };\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      setReloadCircuit(true);\n\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage\n          })\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr => onlineUserArr.includes(user._id));\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        }); // Log the notification for every user that is offline so it appears when they log in\n\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message,\n              userId: user._id\n            })\n          });\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(`http://localhost:4000/api/message/${activeChat[0]._id}`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${currentUser.token}`\n      }\n    });\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(`http://localhost:4000/api/notification/addNotification`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${currentUser.token}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message\n            })\n          });\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [socket, activeChat, setNotifications, currentUser.token]);\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n  const setRef = useCallback(node => {\n    if (node && isTyping && isScrolledIntoView(node)) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    } else if (node && !isTyping) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, [isTyping]);\n\n  function isScrolledIntoView(el) {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom; // Only completely visible elements return true:\n\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight; // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n\n    return isVisible;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-view-container\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      type: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-view-active-chat-container\",\n        children: messages.length > 0 && messages.map((message, i) => {\n          const lastMessageBool = messages.length - 1 === i + 1;\n          const userSentBool = userSent(currentUser, message);\n          const sameSenderAndNotCurrentUserBool = sameSenderAndNotCurrentUser(i, messages, currentUser);\n\n          const firstUnreadMessage = unreadMessages.length > 0 && unreadMessages.at(-1).message._id === message._id;\n\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [firstUnreadMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"first-unread-message-container\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"New\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: lastMessageBool ? setRef : null,\n              style: i === 0 ? {\n                paddingTop: '6px'\n              } : {},\n              className: `message-view-message-container ${userSentBool ? 'user-sent' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-message-image-container\",\n                style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                  visibility: 'hidden'\n                } : {\n                  marginTop: '2px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  height: \"100%\",\n                  src: message.sender.picture,\n                  alt: \"profile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-view-text-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-view-text\",\n                  children: message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: sameSenderAndNotCurrentUserBool || userSentBool ? {\n                    display: 'none'\n                  } : {},\n                  className: \"message-view-text-info\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"@\", !userSentBool ? message.sender.userName : 'You']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 23\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lottie-container\",\n        children: [typers.length ? getTyperString(typers) : '', /*#__PURE__*/_jsxDEV(Lottie, {\n          animationData: animationData,\n          loop: true,\n          autoplay: true,\n          style: {\n            height: '16px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-editable\",\n        \"data-text\": `Message `,\n        contentEditable: true,\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageView, \"4aE90zpCILbxeFLMu7FEKPS/shA=\", false, function () {\n  return [useAuthentication, useChatView, useSocket];\n});\n\n_c = MessageView;\nexport default MessageView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageView\");","map":{"version":3,"names":["useCallback","useEffect","useState","useRef","Lottie","useChatView","Spinner","useAuthentication","animationData","defaultToast","sameSenderAndNotCurrentUser","TOAST_TYPE","userSent","getTyperString","useSocket","typingTimer","MessageView","currentUser","activeChat","setNotifications","setReloadCircuit","unreadMessages","socket","onlineUsers","messages","setMessages","isLoading","setIsLoading","isTyping","setIsTyping","typing","setTyping","typers","setTypers","handleKeyDown","e","newMessage","target","innerHTML","key","preventDefault","response","fetch","method","headers","Authorization","token","body","JSON","stringify","chatId","_id","text","message","json","emit","prevState","chat","usersOtherThanCurrentAndOffline","users","forEach","user","isOnline","some","onlineUserArr","includes","push","userId","error","lastTypingTime","Date","getTime","timerLength","clearTimeout","setTimeout","timeNow","timeDiff","fetchMessages","on","notification","off","typer","Set","userName","usersStillTyping","filter","length","setRef","node","isScrolledIntoView","scrollIntoView","smooth","el","rect","getBoundingClientRect","elemTop","top","elemBottom","bottom","isVisible","window","innerHeight","map","i","lastMessageBool","userSentBool","sameSenderAndNotCurrentUserBool","firstUnreadMessage","at","paddingTop","visibility","marginTop","sender","picture","display","height"],"sources":["/Users/griffinbaker/Desktop/chat-application/client/src/components/message-view/message-view.component.jsx"],"sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react';\nimport Lottie from 'lottie-react';\nimport { useChatView } from '../../contexts/chat-view-context';\nimport Spinner from '../spinner/spinner.component';\nimport './message-view.styles.scss';\nimport { useAuthentication } from '../../contexts/authentication-context';\nimport animationData from '../../animations/typing.json';\nimport {\n  defaultToast,\n  sameSenderAndNotCurrentUser,\n  TOAST_TYPE,\n  userSent,\n  getTyperString,\n} from '../../utils/utils';\nimport { useSocket } from '../../contexts/socket-context';\n\n// Could definitely add timestamp data to the message as well, that would be pretty clean actually\n\nlet typingTimer;\n\nconst MessageView = () => {\n  // Somehow we are going to have to get all of the message in a conversation potentially and then mark whether or not they are your messages or someone else's to style accordingly;\n  const { currentUser } = useAuthentication();\n  const { activeChat, setNotifications, setReloadCircuit, unreadMessages } =\n    useChatView();\n  const { socket, onlineUsers } = useSocket();\n\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [typers, setTypers] = useState([]);\n  // const [scrollToRemoveNewNotification, setScrollToRemoveNewNotification] =\n  //   useState(false);\n\n  // const messageViewContainer = useRef();\n\n  // const onScroll = e => {\n  //   if (!messageViewContainer.current) return;\n  //   const bottom =\n  //     e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n  //   if (bottom && !scrollToRemoveNewNotification) {\n  //     return;\n  //   } else {\n  //     setScrollToRemoveNewNotification(true);\n  //   }\n  // };\n\n  const handleKeyDown = async e => {\n    if (!socket) return;\n    const newMessage = e.target.innerHTML;\n    if (e.key === 'Enter' && newMessage) {\n      e.preventDefault();\n      e.target.innerHTML = '';\n      setReloadCircuit(true);\n      try {\n        const response = await fetch(`http://localhost:4000/api/message`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${currentUser.token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            chatId: activeChat[0]._id,\n            text: newMessage,\n          }),\n        });\n        const message = await response.json();\n        socket.emit('send-msg', message);\n        setMessages(prevState => [...prevState, message]);\n        setTyping(false);\n        socket.emit('chat update', message.chat);\n\n        const usersOtherThanCurrentAndOffline = [];\n        message.chat.users.forEach(user => {\n          if (user._id === currentUser._id) return;\n          const isOnline = onlineUsers.some(onlineUserArr =>\n            onlineUserArr.includes(user._id)\n          );\n          if (!isOnline) usersOtherThanCurrentAndOffline.push(user);\n        });\n\n        // Log the notification for every user that is offline so it appears when they log in\n        usersOtherThanCurrentAndOffline.forEach(async user => {\n          await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n                userId: user._id,\n              }),\n            }\n          );\n        });\n      } catch (error) {\n        defaultToast(TOAST_TYPE.error, 'Error sending');\n      }\n    } else {\n      if (!typing) {\n        setTyping(true);\n        socket.emit('typing', activeChat[0]._id, currentUser);\n      }\n      const lastTypingTime = new Date().getTime();\n      const timerLength = 3000;\n      if (typingTimer) clearTimeout(typingTimer);\n      typingTimer = setTimeout(() => {\n        const timeNow = new Date().getTime();\n        const timeDiff = timeNow - lastTypingTime;\n        if (timeDiff >= timerLength) {\n          socket.emit('stop typing', activeChat[0]._id, currentUser);\n          setTyping(false);\n        }\n      }, timerLength);\n    }\n  };\n\n  const fetchMessages = useCallback(async () => {\n    if (!socket) return;\n    if (!activeChat) return;\n    setIsLoading(true);\n    const response = await fetch(\n      `http://localhost:4000/api/message/${activeChat[0]._id}`,\n      {\n        method: 'get',\n        headers: { Authorization: `Bearer ${currentUser.token}` },\n      }\n    );\n    const messages = await response.json();\n    setMessages(messages);\n    setIsLoading(false);\n  }, [activeChat, currentUser.token, socket]);\n\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages, activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.emit('join room', activeChat[0]._id);\n    socket.emit('stop typing', activeChat[0]._id, currentUser);\n    return () => socket.emit('leave room', activeChat[0]._id);\n  }, [activeChat, socket, currentUser]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msg-received', async message => {\n      if (!activeChat[0]._id || message.chat._id !== activeChat[0]._id) {\n        try {\n          const response = await fetch(\n            `http://localhost:4000/api/notification/addNotification`,\n            {\n              method: 'post',\n              headers: {\n                Authorization: `Bearer ${currentUser.token}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                message,\n              }),\n            }\n          );\n          const notification = await response.json();\n          setNotifications(prevState => [notification, ...prevState]);\n        } catch (error) {\n          defaultToast(TOAST_TYPE.error, 'Error setting notifications');\n        }\n      } else {\n        setIsTyping(false);\n        setMessages(prevState => [...prevState, message]);\n      }\n    });\n    return () => socket.off('msg-received');\n  }, [socket, activeChat, setNotifications, currentUser.token]);\n\n  useEffect(() => {\n    setIsTyping(false);\n  }, [activeChat]);\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('typing', typer => {\n      setIsTyping(true);\n      setTypers(prevState => [...new Set([typer, ...prevState])]);\n    });\n    socket.on('stop typing', userName => {\n      const usersStillTyping = typers.filter(typer => typer !== userName);\n      if (usersStillTyping.length > 0 && typers.length !== 0) {\n        setIsTyping(true);\n        setTypers(usersStillTyping);\n        return;\n      }\n      setIsTyping(false);\n      setTypers([]);\n    });\n    return () => {\n      socket.off('typing');\n      socket.off('stop typing');\n    };\n  }, [socket, typers]);\n  const setRef = useCallback(\n    node => {\n      if (node && isTyping && isScrolledIntoView(node)) {\n        node.scrollIntoView({ smooth: true });\n      } else if (node && !isTyping) {\n        node.scrollIntoView({ smooth: true });\n      }\n    },\n    [isTyping]\n  );\n\n  function isScrolledIntoView(el) {\n    var rect = el.getBoundingClientRect();\n    var elemTop = rect.top;\n    var elemBottom = rect.bottom;\n\n    // Only completely visible elements return true:\n    var isVisible = elemTop >= 0 && elemBottom <= window.innerHeight;\n    // Partially visible elements return true:\n    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n    return isVisible;\n  }\n\n  return (\n    <div className=\"message-view-container\">\n      {isLoading ? (\n        <Spinner type=\"search\" />\n      ) : (\n        <>\n          <div className=\"message-view-active-chat-container\">\n            {messages.length > 0 &&\n              messages.map((message, i) => {\n                const lastMessageBool = messages.length - 1 === i + 1;\n                const userSentBool = userSent(currentUser, message);\n                const sameSenderAndNotCurrentUserBool =\n                  sameSenderAndNotCurrentUser(i, messages, currentUser);\n                const firstUnreadMessage =\n                  unreadMessages.length > 0 &&\n                  unreadMessages.at(-1).message._id === message._id;\n\n                return (\n                  <>\n                    {firstUnreadMessage && (\n                      <div className=\"first-unread-message-container\">\n                        <p>New</p>\n                      </div>\n                    )}\n\n                    <div\n                      key={i}\n                      ref={lastMessageBool ? setRef : null}\n                      style={i === 0 ? { paddingTop: '6px' } : {}}\n                      className={`message-view-message-container ${\n                        userSentBool ? 'user-sent' : ''\n                      }`}\n                    >\n                      <div\n                        className=\"message-view-message-image-container\"\n                        style={\n                          sameSenderAndNotCurrentUserBool || userSentBool\n                            ? { visibility: 'hidden' }\n                            : { marginTop: '2px' }\n                        }\n                      >\n                        <img\n                          height=\"100%\"\n                          src={message.sender.picture}\n                          alt=\"profile\"\n                        />\n                      </div>\n                      <div className=\"message-view-text-container\">\n                        <div className=\"message-view-text\">{message.text}</div>\n                        <div\n                          style={\n                            sameSenderAndNotCurrentUserBool || userSentBool\n                              ? { display: 'none' }\n                              : {}\n                          }\n                          className=\"message-view-text-info\"\n                        >\n                          <p>\n                            @{!userSentBool ? message.sender.userName : 'You'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                );\n              })}\n          </div>\n\n          {isTyping && (\n            <div className=\"lottie-container\">\n              {typers.length ? getTyperString(typers) : ''}\n              <Lottie\n                animationData={animationData}\n                loop={true}\n                autoplay={true}\n                style={{ height: '16px', display: 'block' }}\n              />\n            </div>\n          )}\n\n          <div\n            className=\"send-message-editable\"\n            data-text={`Message `}\n            contentEditable\n            onKeyDown={handleKeyDown}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MessageView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}