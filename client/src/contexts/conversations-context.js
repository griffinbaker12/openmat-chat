import {
  createContext,
  useContext,
  useEffect,
  useState,
  useCallback,
} from 'react';
import { useSidebar } from './sidebar-context';
import { useSocket } from './socket-context';

const ConversationsContext = createContext();

export const useConversations = () => useContext(ConversationsContext);

export const ConversationsProvider = ({ children }) => {
  // const [conversations, setConversations] = useState([]);
  const { chats } = useSidebar();
  const [activeChat, setActiveChat] = useState([]);

  useEffect(() => {
    if (chats.length === 0) return;
    else {
      const activeChat = chats[0];
      setActiveChat([activeChat]);
    }
  }, [chats]);

  // I feel like here you almost need an id to recognize what chat it is so that you can access this from the other component?

  // const createConversation = recipients =>
  //   setConversations(prevState => [...prevState, { recipients, messages: [] }]);

  // And when we set up the database, this can be a unique id generated by the db instead of an index value
  // On this object, you almost want the recipients, and the messages

  // const addMessageToConversation = useCallback(
  //   ({ recipients, text, sender, time }) => {
  //     setConversations(prevState => {
  //       const newConversationsArray = prevState.map(conversation => {
  //         if (arrEqualityTest(conversation.recipients, recipients)) {
  //           return {
  //             ...conversation,
  //             messages: [
  //               ...conversation.messages,
  //               {
  //                 sender,
  //                 text,
  //                 userSent: userName === sender,
  //                 timeStamp: time,
  //               },
  //             ],
  //           };
  //         }
  //         return conversation;
  //       });
  //       return [...newConversationsArray];
  //     });
  //   },
  //   [setConversations, userName]
  // );

  // useEffect(() => {
  //   if (!socket) return;
  //   socket.on('receive-message', addMessageToConversation);
  //   return () => socket.off('receive-message');
  // }, [socket, addMessageToConversation]);

  // const sendMessage = (recipients, text, time) => {
  //   socket.emit('send-message', { recipients, text });
  //   addMessageToConversation({ recipients, text, sender: userName, time });
  // };

  return (
    <ConversationsContext.Provider
      value={{
        activeChat,
        setActiveChat,
      }}
    >
      {children}
    </ConversationsContext.Provider>
  );
};

// // Helper functions
// const arrEqualityTest = (mappedRecipients, receivedRecipients) => {
//   if (mappedRecipients.length !== receivedRecipients.length) return false;
//   mappedRecipients.sort();
//   receivedRecipients.sort();
//   return receivedRecipients.every(
//     (recipient, i) => recipient === mappedRecipients[i]
//   );
// };
